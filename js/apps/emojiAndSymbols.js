let timeoutId;
let activeSkinTonePopup = null;
const RECENTLY_USED_KEY = 'emoji-and-symbols-recents';
const MAX_RECENTS = 24;

// --- HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ---
export function getHtml() {
    return `
        <div class="p-4 space-y-4 flex flex-col h-full">
            <div id="copy-notification" class="fixed top-24 left-1/2 -translate-x-1/2 bg-green-500 text-white py-2 px-4 rounded-full shadow-lg opacity-0 transition-opacity duration-300 z-20">–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!</div>
            
            <div class="relative">
                <input id="search-input" type="text" placeholder="–ü–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —ç–º–æ–¥–∑–∏..." class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>

            <div class="flex border-b border-gray-300 dark:border-gray-600 mb-4">
                <button id="symbols-tab" class="tab-btn py-2 px-4 font-semibold border-b-2">–°–∏–º–≤–æ–ª—ã</button>
                <button id="emoji-tab" class="tab-btn py-2 px-4 font-semibold border-b-2">–≠–º–æ–¥–∑–∏</button>
                <button id="recents-tab" class="tab-btn py-2 px-4 font-semibold border-b-2 active">–ù–µ–¥–∞–≤–Ω–∏–µ</button>
            </div>
            
            <div class="flex-grow overflow-y-auto">
                <div id="recents-content"></div>
                <div id="symbols-content" class="hidden"></div>
                <div id="emoji-content" class="hidden"></div>
                <div id="search-results" class="hidden"></div>
            </div>
        </div>
    `;
}

// --- –õ–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ---
export function init() {
    // --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –° –ö–õ–Æ–ß–ï–í–´–ú–ò –°–õ–û–í–ê–ú–ò ---
    const symbolsData = {
        '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ': [
            { char: '‚úì', keywords: ['–≥–∞–ª–æ—á–∫–∞', 'check', 'yes', '–¥–∞', 'ok'] }, { char: '‚úó', keywords: ['–∫—Ä–µ—Å—Ç–∏–∫', 'x', 'no', '–Ω–µ—Ç', '–æ—à–∏–±–∫–∞'] },
            { char: '‚òÖ', keywords: ['–∑–≤–µ–∑–¥–∞', 'star', '–∏–∑–±—Ä–∞–Ω–Ω–æ–µ'] }, { char: '‚òÜ', keywords: ['–∑–≤–µ–∑–¥–∞', 'star', '–∫–æ–Ω—Ç—É—Ä'] },
            { char: '‚ô•', keywords: ['—Å–µ—Ä–¥—Ü–µ', 'heart', '–ª—é–±–æ–≤—å', 'love'] }, { char: '‚ÇΩ', keywords: ['—Ä—É–±–ª—å', '–≤–∞–ª—é—Ç–∞', '–¥–µ–Ω—å–≥–∏'] },
            { char: '‚Ç¨', keywords: ['–µ–≤—Ä–æ', 'euro', '–≤–∞–ª—é—Ç–∞'] }, { char: '$', keywords: ['–¥–æ–ª–ª–∞—Ä', 'dollar', '–≤–∞–ª—é—Ç–∞'] },
            { char: '‚Üí', keywords: ['—Å—Ç—Ä–µ–ª–∫–∞', '–≤–ø—Ä–∞–≤–æ', 'arrow', 'right'] }, { char: '‚Üê', keywords: ['—Å—Ç—Ä–µ–ª–∫–∞', '–≤–ª–µ–≤–æ', 'arrow', 'left'] },
            { char: '¬©', keywords: ['–∫–æ–ø–∏—Ä–∞–π—Ç', 'copyright'] }, { char: '‚Ñ¢', keywords: ['—Ç–æ—Ä–≥–æ–≤–∞—è –º–∞—Ä–∫–∞', 'tm', 'trademark'] }
        ],
        '–í–∞–ª—é—Ç—ã': [
            { char: '‚Ç¨', keywords: ['–µ–≤—Ä–æ', 'euro'] }, { char: '¬£', keywords: ['—Ñ—É–Ω—Ç', 'pound'] }, { char: '¬•', keywords: ['–∏–µ–Ω–∞', '–π–µ–Ω–∞', 'yuan'] },
            { char: '‚ÇΩ', keywords: ['—Ä—É–±–ª—å', 'ruble'] }, { char: '‚Ç¥', keywords: ['–≥—Ä–∏–≤–Ω–∞', 'hryvnia'] }, { char: '$', keywords: ['–¥–æ–ª–ª–∞—Ä', 'dollar'] },
            { char: '¬¢', keywords: ['—Ü–µ–Ω—Ç', 'cent'] }, { char: '‚Ç©', keywords: ['–≤–æ–Ω–∞', 'won'] }, { char: '‚Ç™', keywords: ['—à–µ–∫–µ–ª—å', 'shekel'] },
            { char: '‚ÇÆ', keywords: ['—Ç—É–≥—Ä–∏–∫', 'tugrik'] }, { char: '‚Çπ', keywords: ['—Ä—É–ø–∏—è', 'rupee'] }, { char: '‚Çø', keywords: ['–±–∏—Ç–∫–æ–∏–Ω', 'bitcoin'] }
        ],
        '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ': [
            { char: '‚âà', keywords: ['–ø—Ä–∏–º–µ—Ä–Ω–æ', '—Ä–∞–≤–Ω–æ'] }, { char: '‚â†', keywords: ['–Ω–µ —Ä–∞–≤–Ω–æ'] }, { char: '‚â§', keywords: ['–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ'] },
            { char: '‚â•', keywords: ['–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ'] }, { char: '√∑', keywords: ['–¥–µ–ª–µ–Ω–∏–µ'] }, { char: '√ó', keywords: ['—É–º–Ω–æ–∂–µ–Ω–∏–µ'] },
            { char: '‚àí', keywords: ['–º–∏–Ω—É—Å', '–≤—ã—á–∏—Ç–∞–Ω–∏–µ'] }, { char: '+', keywords: ['–ø–ª—é—Å', '—Å–ª–æ–∂–µ–Ω–∏–µ'] }, { char: '‚àû', keywords: ['–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å'] },
            { char: 'œÄ', keywords: ['–ø–∏', 'pi'] }, { char: '‚àö', keywords: ['–∫–æ—Ä–µ–Ω—å', '–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π'] }, { char: '‚à´', keywords: ['–∏–Ω—Ç–µ–≥—Ä–∞–ª'] },
            { char: '‚àë', keywords: ['—Å—É–º–º–∞'] }, { char: '¬±', keywords: ['–ø–ª—é—Å-–º–∏–Ω—É—Å'] }, { char: '¬∞', keywords: ['–≥—Ä–∞–¥—É—Å'] }
        ],
        '–°—Ç—Ä–µ–ª–∫–∏': [
            { char: '‚Üê', keywords: ['–≤–ª–µ–≤–æ'] }, { char: '‚Üë', keywords: ['–≤–≤–µ—Ä—Ö'] }, { char: '‚Üí', keywords: ['–≤–ø—Ä–∞–≤–æ'] },
            { char: '‚Üì', keywords: ['–≤–Ω–∏–∑'] }, { char: '‚Üî', keywords: ['–≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ'] }, { char: '‚Üï', keywords: ['–≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑'] },
            { char: '‚Üñ', keywords: ['—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥'] }, { char: '‚Üó', keywords: ['—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫'] }, { char: '‚Üò', keywords: ['—é–≥–æ-–≤–æ—Å—Ç–æ–∫'] },
            { char: '‚Üô', keywords: ['—é–≥–æ-–∑–∞–ø–∞–¥'] }
        ],
    };

    const emojiData = {
        '–°–º–∞–π–ª–∏–∫–∏ –∏ –ª—é–¥–∏': [
            { char: 'üòÄ', keywords: ['–ª–∏—Ü–æ', '—É–ª—ã–±–∫–∞', '—Å—á–∞—Å—Ç—å–µ'] }, { char: 'üòÇ', keywords: ['–ª–∏—Ü–æ', '—Å–º–µ—Ö', '—Å–ª–µ–∑—ã', '—Ä–∞–¥–æ—Å—Ç—å'] },
            { char: 'üòä', keywords: ['–ª–∏—Ü–æ', '—É–ª—ã–±–∫–∞', '—Å—á–∞—Å—Ç—å–µ', '—Ä—É–º—è–Ω–µ—Ü'] }, { char: 'üòç', keywords: ['–ª–∏—Ü–æ', '–ª—é–±–æ–≤—å', '—Å–µ—Ä–¥—Ü–µ', '–≥–ª–∞–∑–∞'] },
            { char: 'ü§î', keywords: ['–ª–∏—Ü–æ', '–º—ã—Å–ª–∏', '–¥—É–º–∞—Ç—å'] }, { char: 'üòé', keywords: ['–ª–∏—Ü–æ', '–æ—á–∫–∏', '–∫—Ä—É—Ç–æ–π'] },
            { char: 'üëã', keywords: ['—Ä—É–∫–∞', '–ø—Ä–∏–≤–µ—Ç', '–ø–æ–∫–∞'] }, { char: 'üëç', keywords: ['—Ä—É–∫–∞', '–ø–∞–ª–µ—Ü –≤–≤–µ—Ä—Ö', '–ª–∞–π–∫', '—Ö–æ—Ä–æ—à–æ'] },
            { char: 'üôè', keywords: ['—Ä—É–∫–∏', '–º–æ–ª–∏—Ç–≤–∞', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '—Å–ø–∞—Å–∏–±–æ'] }, { char: 'üß†', keywords: ['–º–æ–∑–≥', '—É–º', '–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'] }
        ],
        '–ñ–∏–≤–æ—Ç–Ω—ã–µ –∏ –ø—Ä–∏—Ä–æ–¥–∞': [
            { char: 'üê∂', keywords: ['—Å–æ–±–∞–∫–∞', '–ø–µ—Å', '–∂–∏–≤–æ—Ç–Ω–æ–µ'] }, { char: 'üê±', keywords: ['–∫–æ—à–∫–∞', '–∫–æ—Ç', '–∂–∏–≤–æ—Ç–Ω–æ–µ'] },
            { char: 'ü¶ä', keywords: ['–ª–∏—Å–∞', '–∂–∏–≤–æ—Ç–Ω–æ–µ'] }, { char: 'üå≥', keywords: ['–¥–µ—Ä–µ–≤–æ', '—Ä–∞—Å—Ç–µ–Ω–∏–µ', '–ø—Ä–∏—Ä–æ–¥–∞'] },
            { char: 'üå∏', keywords: ['—Ü–≤–µ—Ç–æ–∫', '–≤–∏—à–Ω—è', '–≤–µ—Å–Ω–∞'] }, { char: 'üåç', keywords: ['–∑–µ–º–ª—è', '–ø–ª–∞–Ω–µ—Ç–∞', '–º–∏—Ä'] }
        ],
        '–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏': [
            { char: 'üçé', keywords: ['—è–±–ª–æ–∫–æ', '—Ñ—Ä—É–∫—Ç'] }, { char: 'üçï', keywords: ['–ø–∏—Ü—Ü–∞', '–µ–¥–∞'] }, { char: '‚òï', keywords: ['–∫–æ—Ñ–µ', '–Ω–∞–ø–∏—Ç–æ–∫', '—á–∞—à–∫–∞'] },
            { char: 'üçî', keywords: ['–±—É—Ä–≥–µ—Ä', '–≥–∞–º–±—É—Ä–≥–µ—Ä', '–µ–¥–∞'] }
        ],
        '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': [
            { char: '‚öΩ', keywords: ['—Ñ—É—Ç–±–æ–ª', '–º—è—á', '—Å–ø–æ—Ä—Ç'] }, { char: 'üèÄ', keywords: ['–±–∞—Å–∫–µ—Ç–±–æ–ª', '–º—è—á', '—Å–ø–æ—Ä—Ç'] },
            { char: 'üé®', keywords: ['–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–ø–∞–ª–∏—Ç—Ä–∞', '—Ä–∏—Å–æ–≤–∞–Ω–∏–µ'] }, { char: 'üéÆ', keywords: ['–∏–≥—Ä–∞', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–¥–∂–æ–π—Å—Ç–∏–∫'] },
            { char: 'üéµ', keywords: ['–º—É–∑—ã–∫–∞', '–Ω–æ—Ç–∞'] }
        ],
        '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –º–µ—Å—Ç–∞': [
            { char: 'üöó', keywords: ['–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'] }, { char: '‚úàÔ∏è', keywords: ['—Å–∞–º–æ–ª–µ—Ç', '–ø–æ–ª–µ—Ç', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ'] },
            { char: 'üó∫Ô∏è', keywords: ['–∫–∞—Ä—Ç–∞', '–º–∏—Ä', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ'] }, { char: 'üè†', keywords: ['–¥–æ–º', '–∑–¥–∞–Ω–∏–µ'] },
            { char: 'üóº', keywords: ['–±–∞—à–Ω—è', '—ç–π—Ñ–µ–ª–µ–≤–∞', '–ø–∞—Ä–∏–∂'] }
        ],
        '–û–±—ä–µ–∫—Ç—ã': [
            { char: 'üíª', keywords: ['–∫–æ–º–ø—å—é—Ç–µ—Ä', '–Ω–æ—É—Ç–±—É–∫', '—Ç–µ—Ö–Ω–∏–∫–∞'] }, { char: 'üì±', keywords: ['—Ç–µ–ª–µ—Ñ–æ–Ω', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω'] },
            { char: 'üí°', keywords: ['–ª–∞–º–ø–æ—á–∫–∞', '–∏–¥–µ—è', '—Å–≤–µ—Ç'] }, { char: 'üîë', keywords: ['–∫–ª—é—á', '–∑–∞–º–æ–∫', '–ø–∞—Ä–æ–ª—å'] },
            { char: 'üìö', keywords: ['–∫–Ω–∏–≥–∏', '—É—á–µ–±–∞', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞'] }
        ],
        '–§–ª–∞–≥–∏': [
            { char: 'üè≥Ô∏è‚Äçüåà', keywords: ['—Ä–∞–¥—É–≥–∞', '–ø—Ä–∞–π–¥', '–ª–≥–±—Ç'] }, { char: 'üèÅ', keywords: ['—Ñ–∏–Ω–∏—à', '–≥–æ–Ω–∫–∞', '–∫–ª–µ—Ç—á–∞—Ç—ã–π'] },
        ]
    };
    
    const skinToneModifiers = ['üèª', 'üèº', 'üèΩ', 'üèæ', 'üèø'];
    const emojiWithSkinToneSupport = new Set(['üëã', 'üëç', 'üôè', '‚úçÔ∏è', 'üíÖ', 'ü§≥', 'üí™', 'ü¶µ', 'ü¶∂', 'üëÇ', 'üëÉ', 'üë∂', 'üßí', 'üë¶', 'üëß', 'üßë', 'üë±', 'üë®', 'üßî', 'üë©', 'üßì', 'üë¥', 'üëµ']);

    const searchInput = document.getElementById('search-input');
    const notification = document.getElementById('copy-notification');
    const tabs = {
        symbols: document.getElementById('symbols-tab'),
        emoji: document.getElementById('emoji-tab'),
        recents: document.getElementById('recents-tab'),
    };
    const contents = {
        symbols: document.getElementById('symbols-content'),
        emoji: document.getElementById('emoji-content'),
        recents: document.getElementById('recents-content'),
    };

    // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º–∏" ---
    const getRecents = () => JSON.parse(localStorage.getItem(RECENTLY_USED_KEY)) || [];

    const addRecent = (item) => {
        let recents = getRecents();
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        recents = recents.filter(r => r.char !== item.char);
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        recents.unshift(item);
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        if (recents.length > MAX_RECENTS) {
            recents = recents.slice(0, MAX_RECENTS);
        }
        localStorage.setItem(RECENTLY_USED_KEY, JSON.stringify(recents));
    };

    const copyToClipboard = (text, item) => {
        navigator.clipboard.writeText(text);
        notification.classList.remove('opacity-0');
        if (timeoutId) clearTimeout(timeoutId);
        timeoutId = setTimeout(() => notification.classList.add('opacity-0'), 1000);
        if (item) {
            addRecent(item);
        }
    };
    
    // --- –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤ ---
    const createGrid = (data, isEmoji) => {
        const fragment = document.createDocumentFragment();
        for (const category in data) {
            const categoryDiv = document.createElement('div');
            categoryDiv.className = 'category-container mb-4';
            categoryDiv.innerHTML = `<h3 class="category-title text-lg font-semibold mb-2 border-b border-gray-300 dark:border-gray-600 pb-1">${category}</h3>`;
            
            const symbolsGrid = document.createElement('div');
            symbolsGrid.className = 'grid grid-cols-6 sm:grid-cols-8 md:grid-cols-10 gap-2';
            
            data[category].forEach(item => {
                const btn = document.createElement('button');
                const { char, keywords, display, title } = item;
                const text = display || char;
                const copyText = char;

                btn.className = 'symbol-btn relative flex items-center justify-center p-2 bg-gray-200 dark:bg-gray-700 rounded-lg hover:bg-blue-500 hover:text-white transition-colors text-xl';
                btn.textContent = text;
                btn.dataset.keywords = [char, ...keywords].join(',');
                if (title) btn.title = title;

                if (isEmoji && emojiWithSkinToneSupport.has(copyText)) {
                     btn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        if (activeSkinTonePopup) activeSkinTonePopup.remove();
                        const skinTonePopup = document.createElement('div');
                        skinTonePopup.className = 'absolute z-10 bottom-full mb-2 flex justify-center bg-white dark:bg-gray-800 border dark:border-gray-600 rounded-lg shadow-lg p-1';
                        skinToneModifiers.forEach(modifier => {
                            const toneBtn = document.createElement('button');
                            toneBtn.className = 'p-2 text-2xl rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700';
                            toneBtn.textContent = copyText + modifier;
                            toneBtn.addEventListener('click', (ev) => {
                                ev.stopPropagation();
                                copyToClipboard(copyText + modifier, item);
                                if (activeSkinTonePopup) activeSkinTonePopup.remove();
                            });
                            skinTonePopup.appendChild(toneBtn);
                        });
                        activeSkinTonePopup = skinTonePopup;
                        btn.appendChild(skinTonePopup);
                    });
                } else {
                    btn.addEventListener('click', () => {
                        copyToClipboard(copyText, item);
                    });
                }
                symbolsGrid.appendChild(btn);
            });
            categoryDiv.appendChild(symbolsGrid);
            fragment.appendChild(categoryDiv);
        }
        return fragment;
    };
    
    const renderRecents = () => {
        contents.recents.innerHTML = '';
        const recents = getRecents();
        if (recents.length === 0) {
            contents.recents.innerHTML = `<p class="text-gray-500">–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–µ–¥–∞–≤–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.</p>`;
            return;
        }
        const recentsGrid = createGrid({ '–ù–µ–¥–∞–≤–Ω–∏–µ': recents }, true); // isEmoji=true –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–Ω–æ–≤ –∫–æ–∂–∏
        contents.recents.appendChild(recentsGrid);
    };

    // --- –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫ ---
    const switchTab = (activeKey) => {
        if (activeSkinTonePopup) activeSkinTonePopup.remove();
        Object.keys(tabs).forEach(key => {
            const isActive = key === activeKey;
            tabs[key].classList.toggle('active', isActive);
            contents[key].classList.toggle('hidden', !isActive);
        });
        if (activeKey === 'recents') {
            renderRecents();
        }
    };
    
    // --- –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ ---
    const handleSearch = (e) => {
        const query = e.target.value.toLowerCase().trim();
        
        if (!query) {
            // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
            document.querySelectorAll('.category-container, .symbol-btn').forEach(el => el.classList.remove('hidden'));
            return;
        }

        document.querySelectorAll('.category-container').forEach(cat => {
            let hasVisibleSymbols = false;
            cat.querySelectorAll('.symbol-btn').forEach(btn => {
                const keywords = btn.dataset.keywords.toLowerCase();
                if (keywords.includes(query)) {
                    btn.classList.remove('hidden');
                    hasVisibleSymbols = true;
                } else {
                    btn.classList.add('hidden');
                }
            });
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –≤ –Ω–µ–π –Ω–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            cat.classList.toggle('hidden', !hasVisibleSymbols);
        });
    };

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    contents.symbols.appendChild(createGrid(symbolsData, false));
    contents.emoji.appendChild(createGrid(emojiData, true));
    
    Object.keys(tabs).forEach(key => {
        tabs[key].addEventListener('click', () => switchTab(key));
    });
    
    document.addEventListener('click', () => {
        if (activeSkinTonePopup) {
            activeSkinTonePopup.remove();
            activeSkinTonePopup = null;
        }
    });

    searchInput.addEventListener('input', handleSearch);
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫—Ä—ã–≤–∞–µ–º "–ù–µ–¥–∞–≤–Ω–∏–µ"
    switchTab('recents');
}

// --- –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ ---
export function cleanup() {
    if (timeoutId) clearTimeout(timeoutId);
    if (activeSkinTonePopup) activeSkinTonePopup.remove();
    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    const searchInput = document.getElementById('search-input');
    if (searchInput) searchInput.removeEventListener('input', handleSearch);
}
