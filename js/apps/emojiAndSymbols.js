let timeoutId;
// –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–∞–∑–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —ç–º–æ–¥–∑–∏
const RECENT_SYMBOLS_KEY = 'recentSymbols';
const RECENT_EMOJI_KEY = 'recentEmojis';
const RECENT_LIMIT = 20;

function getRecent(key) {
    return JSON.parse(localStorage.getItem(key)) || [];
}

function addToRecent(key, symbol) {
    let recent = getRecent(key);
    recent = recent.filter(item => item.c !== symbol.c); // c = copy
    recent.unshift(symbol);
    if (recent.length > RECENT_LIMIT) {
        recent.pop();
    }
    localStorage.setItem(key, JSON.stringify(recent));
}

export function getHtml() {
    return `
        <!-- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∏–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ -->
        <style>
            .tab-btn {
                color: #6B7280; /* gray-500 */
                border-color: transparent;
                transition: all 0.2s ease-in-out;
            }
            .dark .tab-btn {
                color: #9CA3AF; /* dark:gray-400 */
            }
            .tab-btn.active {
                color: white;
                background-color: #3B82F6; /* blue-500 */
                border-color: #3B82F6;
                border-radius: 0.5rem 0.5rem 0 0;
            }
            .dark .tab-btn.active {
                background-color: #60A5FA; /* dark:blue-400 */
                color: #1F2937; /* dark:gray-800 */
                border-color: #60A5FA;
            }
             .tab-btn:not(.active):hover {
                color: #1F2937; /* gray-800 */
                border-color: #D1D5DB; /* gray-300 */
             }
             .dark .tab-btn:not(.active):hover {
                color: #F9FAFB; /* gray-50 */
                border-color: #4B5563; /* gray-600 */
             }
        </style>
        <div class="p-4 space-y-4">
            <div id="copy-notification" class="fixed top-24 left-1/2 -translate-x-1/2 bg-green-500 text-white py-2 px-4 rounded-full shadow-lg opacity-0 transition-opacity duration-300 z-50">–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!</div>
            <div class="relative mb-4">
                <input type="search" id="symbol-search" placeholder="–ü–æ–∏—Å–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Ä–¥—Ü–µ, —Å—Ç—Ä–µ–ª–∫–∞, money...)" class="w-full p-3 pl-10 border rounded-full bg-gray-50 dark:bg-gray-700 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                <svg class="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
            </div>
            <div class="flex border-b border-gray-300 dark:border-gray-600">
                <button id="symbols-tab" class="tab-btn py-2 px-4 font-semibold border-b-2 active">–°–∏–º–≤–æ–ª—ã</button>
                <button id="emoji-tab" class="tab-btn py-2 px-4 font-semibold border-b-2">–≠–º–æ–¥–∑–∏</button>
            </div>
            <div id="symbols-content"></div>
            <div id="emoji-content" class="hidden"></div>
        </div>
    `;
}

export function init() {
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: s - symbol, k - keywords, d - display, c - copy, t - title
    const symbolsData = {
        '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ': [{s:'‚úì',k:'–≥–∞–ª–æ—á–∫–∞'}, {s:'‚úó',k:'–∫—Ä–µ—Å—Ç–∏–∫'}, {s:'‚òÖ',k:'–∑–≤–µ–∑–¥–∞'}, {s:'‚òÜ',k:'–∑–≤–µ–∑–¥–∞'}, {s:'‚ô•',k:'—Å–µ—Ä–¥—Ü–µ'}, {s:'‚ÇΩ',k:'—Ä—É–±–ª—å'}, {s:'‚Ç¨',k:'–µ–≤—Ä–æ'}, {s:'$',k:'–¥–æ–ª–ª–∞—Ä'}, {s:'‚Üí',k:'—Å—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ'}, {s:'‚Üê',k:'—Å—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ'}, {s:'¬©',k:'–∫–æ–ø–∏—Ä–∞–π—Ç'}, {s:'‚Ñ¢',k:'—Ç–º'}],
        '–í–∞–ª—é—Ç—ã': [{s:'‚Ç¨',k:'–µ–≤—Ä–æ'}, {s:'¬£',k:'—Ñ—É–Ω—Ç'}, {s:'¬•',k:'–π–µ–Ω–∞'}, {s:'‚ÇΩ',k:'—Ä—É–±–ª—å'}, {s:'‚Ç¥',k:'–≥—Ä–∏–≤–Ω–∞'}, {s:'$',k:'–¥–æ–ª–ª–∞—Ä'}, {s:'¬¢',k:'—Ü–µ–Ω—Ç'}, {s:'‚Ç©',k:'–≤–æ–Ω'}, {s:'‚Ç™',k:'—à–µ–∫–µ–ª—å'}, {s:'‚ÇÆ',k:'—Ç—É–≥—Ä–∏–∫'}, {s:'‚Çπ',k:'—Ä—É–ø–∏—è'}, {s:'‚Çø',k:'–±–∏—Ç–∫–æ–∏–Ω'}, {s:'‚Ç£',k:'—Ñ—Ä–∞–Ω–∫'}, {s:'‚Ç§',k:'–ª–∏—Ä–∞'}, {s:'‚Çß',k:'–ø–µ—Å–µ—Ç–∞'}],
        '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ': [{s:'‚âà',k:'–ø—Ä–∏–º–µ—Ä–Ω–æ'}, {s:'‚â†',k:'–Ω–µ —Ä–∞–≤–Ω–æ'}, {s:'‚â§',k:'–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ'}, {s:'‚â•',k:'–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ'}, {s:'√∑',k:'–¥–µ–ª–µ–Ω–∏–µ'}, {s:'√ó',k:'—É–º–Ω–æ–∂–µ–Ω–∏–µ'}, {s:'‚àí',k:'–º–∏–Ω—É—Å'}, {s:'+',k:'–ø–ª—é—Å'}, {s:'‚àû',k:'–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å'}, {s:'œÄ',k:'–ø–∏'}, {s:'‚àö',k:'–∫–æ—Ä–µ–Ω—å'}, {s:'‚à´',k:'–∏–Ω—Ç–µ–≥—Ä–∞–ª'}, {s:'‚àë',k:'—Å—É–º–º–∞'}, {s:'‚àÇ',k:'–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª'}, {s:'‚àÖ',k:'–ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ'}, {s:'¬±',k:'–ø–ª—é—Å-–º–∏–Ω—É—Å'}, {s:'¬∞',k:'–≥—Ä–∞–¥—É—Å'}, {s:'¬π',k:'1 —Å—Ç–µ–ø–µ–Ω—å'}, {s:'¬≤',k:'2 —Å—Ç–µ–ø–µ–Ω—å'}, {s:'¬≥',k:'3 —Å—Ç–µ–ø–µ–Ω—å'}, {s:'¬µ',k:'–º—é –º–∏–∫—Ä–æ'}, {s:'‚àÜ',k:'–¥–µ–ª—å—Ç–∞'}, {s:'¬º',k:'–æ–¥–Ω–∞ —á–µ—Ç–≤–µ—Ä—Ç—å'}, {s:'¬Ω',k:'–æ–¥–Ω–∞ –≤—Ç–æ—Ä–∞—è'}, {s:'¬æ',k:'—Ç—Ä–∏ —á–µ—Ç–≤–µ—Ä—Ç–∏'}],
        '–°—Ç—Ä–µ–ª–∫–∏': [{s:'‚Üê',k:'—Å—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ'}, {s:'‚Üë',k:'—Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö'}, {s:'‚Üí',k:'—Å—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ'}, {s:'‚Üì',k:'—Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑'}, {s:'‚Üî',k:'—Å—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ –≤–ø—Ä–∞–≤–æ'}, {s:'‚Üï',k:'—Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö –≤–Ω–∏–∑'}, {s:'‚Üñ',k:'—Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö –≤–ª–µ–≤–æ'}, {s:'‚Üó',k:'—Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö –≤–ø—Ä–∞–≤–æ'}, {s:'‚Üò',k:'—Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑ –≤–ø—Ä–∞–≤–æ'}, {s:'‚Üô',k:'—Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑ –≤–ª–µ–≤–æ'}, {s:'‚á¶',k:'—Å—Ç—Ä–µ–ª–∫–∞'}, {s:'‚áß',k:'—Å—Ç—Ä–µ–ª–∫–∞'}, {s:'‚á®',k:'—Å—Ç—Ä–µ–ª–∫–∞'}, {s:'‚á©',k:'—Å—Ç—Ä–µ–ª–∫–∞'}, {s:'‚û•',k:'—Å—Ç—Ä–µ–ª–∫–∞'}, {s:'‚Ü∂',k:'—Å—Ç—Ä–µ–ª–∫–∞'}, {s:'‚Ü∑',k:'—Å—Ç—Ä–µ–ª–∫–∞'}],
        '–ü—É–Ω–∫—Ç—É–∞—Ü–∏—è –∏ –ø—Ä–æ—á–µ–µ': [{s:'¬©',k:'–∫–æ–ø–∏—Ä–∞–π—Ç'}, {s:'¬Æ',k:'–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ'}, {s:'‚Ñ¢',k:'—Ç–º'}, {s:'¬ß',k:'–ø–∞—Ä–∞–≥—Ä–∞—Ñ'}, {s:'‚Ä¢',k:'—Ç–æ—á–∫–∞'}, {s:'‚Ä¶',k:'–º–Ω–æ–≥–æ—Ç–æ—á–∏–µ'}, {s:'‚Äì',k:'—Ç–∏—Ä–µ'}, {s:'‚Äî',k:'–¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ'}, {s:'‚Äò',k:'–∫–∞–≤—ã—á–∫–∞'}, {s:'‚Äô',k:'–∫–∞–≤—ã—á–∫–∞'}, {s:'‚Äú',k:'–∫–∞–≤—ã—á–∫–∞'}, {s:'‚Äù',k:'–∫–∞–≤—ã—á–∫–∞'}, {s:'‚Äû',k:'–∫–∞–≤—ã—á–∫–∞'}, {s:'¬´',k:'–∫–∞–≤—ã—á–∫–∞'}, {s:'¬ª',k:'–∫–∞–≤—ã—á–∫–∞'}],
        '–§–∏–≥—É—Ä—ã –∏ –∑–Ω–∞–∫–∏': [{s:'‚òÖ',k:'–∑–≤–µ–∑–¥–∞'}, {s:'‚òÜ',k:'–∑–≤–µ–∑–¥–∞'}, {s:'‚úì',k:'–≥–∞–ª–æ—á–∫–∞'}, {s:'‚úó',k:'–∫—Ä–µ—Å—Ç–∏–∫'}, {s:'‚ô•',k:'—Å–µ—Ä–¥—Ü–µ'}, {s:'‚ô¶',k:'–±—É–±–Ω—ã'}, {s:'‚ô£',k:'—Ç—Ä–µ—Ñ—ã'}, {s:'‚ô†',k:'–ø–∏–∫–∏'}, {s:'‚ô™',k:'–Ω–æ—Ç–∞'}, {s:'‚ô´',k:'–Ω–æ—Ç–∞'}, {s:'‚óè',k:'–∫—Ä—É–≥'}, {s:'‚óã',k:'–∫—Ä—É–≥'}, {s:'‚ñ†',k:'–∫–≤–∞–¥—Ä–∞—Ç'}, {s:'‚ñ°',k:'–∫–≤–∞–¥—Ä–∞—Ç'}, {s:'‚ñ≤',k:'—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫'}, {s:'‚ñº',k:'—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫'}, {s:'‚óÑ',k:'—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫'}, {s:'‚ñ∫',k:'—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫'}, {s:'‚óâ',k:'–∫—Ä—É–≥'}, {s:'‚óä',k:'—Ä–æ–º–±'}, {s:'‚ó¶',k:'–∫—Ä—É–≥'}],
        '–ü—Ä–æ–±–µ–ª—ã': [ {d: '–ü—É—Å—Ç–æ–π', c: '\u00A0', t: '–ù–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª', k: '–ø—É—Å—Ç–æ–π –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π' }, {d: '–£–∑–∫–∏–π', c: '\u2009', t: '–£–∑–∫–∏–π –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª', k: '—É–∑–∫–∏–π —Ç–æ–Ω–∫–∏–π' } ]
    };
    const emojiStrings = {
        '–°–º–∞–π–ª–∏–∫–∏ –∏ —ç–º–æ—Ü–∏–∏': 'üòÄüòÅüòÇü§£üòÉüòÑüòÖüòÜüòâüòäüòãüòéüòçüòòü•∞üòóüòôüòöüôÇü§óü§©ü§îü§®üòêüòëüò∂üôÑüòèüò£üò•üòÆü§êüòØüò™üò´üò¥üòåüòõüòúüòùü§§üòíüòìüòîüòïüôÉü§ëüò≤‚òπÔ∏èüôÅüòñüòûüòüüò§üò¢üò≠üò¶üòßüò®üò©ü§Øüò¨üò∞üò±ü•µü•∂üò≥ü§™üòµüò°üò†ü§¨üò∑ü§íü§ïü§¢ü§Æü§ßüòáü§†ü•≥ü•¥ü•∫ü§°ü§•ü§´ü§≠üßêü§ì',
        '–õ—é–¥–∏ –∏ —Ç–µ–ª–æ': 'üëãü§öüñêÔ∏è‚úãüññüëåü§åü§è‚úåÔ∏èü§ûü§üü§òü§ôüëàüëâüëÜüñïüëá‚òùÔ∏èüëçüëé‚úäüëäü§õü§úüëèüôåüëêü§≤ü§ùüôè‚úçÔ∏èüíÖü§≥üí™ü¶æü¶µü¶øü¶∂üëÇü¶ªüëÉüß†ü´Äü´Åü¶∑ü¶¥üëÄüëÅÔ∏èüëÖüëÑüë∂üßíüë¶üëßüßëüë±üë®üßîüë©üßìüë¥üëµ',
        '–ñ–∏–≤–æ—Ç–Ω—ã–µ –∏ –ø—Ä–∏—Ä–æ–¥–∞': 'üê∂üê±üê≠üêπüê∞ü¶äüêªüêºüê®üêØü¶ÅüêÆüê∑üê∏üêµüêîüêßüê¶üê§ü¶ãüêõüê∫üêóüê¥ü¶ìü¶íüêòü¶èüê™üê´üêøÔ∏èü¶îüêæüåµüéÑüå≤üå≥üå¥üå±üåø‚òòÔ∏èüçÄüéçüéãüçÉüçÇüçÅüçÑüêöüåæüíêüå∑üåπü•Äüå∫üå∏üåºüåªüåûüåéüåçüåèüåïüåñüåóüåòüåëüåíüåìüåîüåôüåöüåõüåúüí´‚≠êüåü‚ú®‚ö°üî•üí•‚òÑÔ∏è‚òÄÔ∏èüå§Ô∏è‚õÖüå•Ô∏èüå¶Ô∏èüåà‚òÅÔ∏èüåßÔ∏è‚õàÔ∏èüå©Ô∏èüå®Ô∏èüå¨Ô∏èüí®üå™Ô∏èüå´Ô∏èüåäüíßüí¶‚òîüíß',
        '–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏': 'üçèüçéüçêüçäüçãüçåüçâüçáüçìüçàüçíüçëüççü••ü•ùüçÖüçÜü•ëü•¶ü•¨ü•íüå∂Ô∏èüåΩü•ïüßÑüßÖü•îüç†ü•êü•Øüçûü•ñü•®üßÄü•öüç≥üßàü•ûüßáü•ìü•©üçóüçñü¶¥üå≠üçîüçüüçïü•™ü•ôüßÜüåÆüåØü•óü•´üçùüçúüç≤üçõüç£üç±ü•üüç§üçôüçöüçòüç•ü•†ü•Æüç¢üçßüç®üç¶ü•ßüßÅüç∞üéÇüçÆüç≠üç¨üç´üçøüç©üç™üå∞ü•úüçØü•õüçº‚òïüçµüßÉü•§üç∂üç∫üçªü•Çüç∑ü•Éüç∏üçπüßâüçæüßäü•Ñüç¥üçΩÔ∏è'
    };
    const emojiData = {};
    for(const category in emojiStrings) { emojiData[category] = emojiStrings[category].split(/(?:)/u).map(emoji => ({ s: emoji })); }
    const addKeywords = (category, map) => { if(emojiData[category]) emojiData[category].forEach(item => { if(map[item.s]) item.k = map[item.s]; }) };
    addKeywords('–°–º–∞–π–ª–∏–∫–∏ –∏ —ç–º–æ—Ü–∏–∏', {'üòÇ':'—Å–º–µ—Ö —Å–ª–µ–∑—ã', '‚ù§Ô∏è':'—Å–µ—Ä–¥—Ü–µ –ª—é–±–æ–≤—å', 'üëç':'–ª–∞–π–∫ –ø–∞–ª–µ—Ü –≤–≤–µ—Ä—Ö', 'ü§î':'–º—ã—Å–ª–∏ –¥—É–º–∞—é', 'ü•≥':'–ø—Ä–∞–∑–¥–Ω–∏–∫ –≤–µ—á–µ—Ä–∏–Ω–∫–∞', 'üò≠':'–ø–ª–∞—á —Å–ª–µ–∑—ã', 'üôè':'–º–æ–ª–∏—Ç–≤–∞ —Å–ø–∞—Å–∏–±–æ'});
    
    const symbolsTab = document.getElementById('symbols-tab'), emojiTab = document.getElementById('emoji-tab'), symbolsContent = document.getElementById('symbols-content'), emojiContent = document.getElementById('emoji-content'), notification = document.getElementById('copy-notification'), searchInput = document.getElementById('symbol-search');

    const createGrid = (data, isEmoji) => {
        const fragment = document.createDocumentFragment();
        for (const category in data) {
            if (category === '–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ' && data[category].length === 0) continue;

            const categoryDiv = document.createElement('div');
            categoryDiv.className = 'mb-4 category-container';
            categoryDiv.dataset.category = category;
            categoryDiv.innerHTML = `<h3 class="text-lg font-semibold mb-2 border-b border-gray-300 dark:border-gray-600 pb-1 category-title">${category}</h3>`;
            
            const symbolsGrid = document.createElement('div');
            symbolsGrid.className = 'grid grid-cols-6 sm:grid-cols-8 md:grid-cols-10 gap-2';
            
            data[category].forEach(symbol => {
                const btn = document.createElement('button');
                const { d, s, c, t, k } = symbol;
                const display = d || s;
                const copy = c || s;
                btn.className = d ? 'flex items-center justify-center p-2 bg-gray-200 dark:bg-gray-700 rounded-lg hover:bg-blue-500 hover:text-white transition-colors text-sm' : 'flex items-center justify-center p-2 bg-gray-200 dark:bg-gray-700 rounded-lg hover:bg-blue-500 hover:text-white transition-colors text-xl';
                btn.textContent = display;
                btn.dataset.keywords = `${display} ${k || ''}`.toLowerCase();
                if(t) btn.title = t;
                
                btn.addEventListener('click', () => { 
                    const dataToSave = { s: display, c: copy, k: k || '', t: t, d: d };
                    if (isEmoji) { addToRecent(RECENT_EMOJI_KEY, dataToSave); } 
                    else { addToRecent(RECENT_SYMBOLS_KEY, dataToSave); }
                    navigator.clipboard.writeText(copy); 
                    notification.classList.remove('opacity-0'); 
                    if (timeoutId) clearTimeout(timeoutId); 
                    timeoutId = setTimeout(() => notification.classList.add('opacity-0'), 1000); 
                });
                symbolsGrid.appendChild(btn);
            });
            categoryDiv.appendChild(symbolsGrid);
            fragment.appendChild(categoryDiv);
        }
        return fragment;
    };
    
    symbolsContent.appendChild(createGrid(symbolsData, false));
    emojiContent.appendChild(createGrid(emojiData, true));
    
    searchInput.addEventListener('input', () => {
        const searchTerm = searchInput.value.toLowerCase().trim();
        document.querySelectorAll('#symbols-content, #emoji-content').forEach(content => {
            content.querySelectorAll('button').forEach(btn => {
                btn.classList.toggle('hidden', !btn.dataset.keywords.includes(searchTerm));
            });
            content.querySelectorAll('.category-container').forEach(container => {
                const hasVisibleButtons = !!container.querySelector('button:not(.hidden)');
                container.classList.toggle('hidden', !hasVisibleButtons);
            });
        });
    });
    
    const updateRecentTab = (contentEl, key, isEmoji) => {
        const recentData = {'–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ': getRecent(key)};
        let container = contentEl.querySelector('[data-category="–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ"]');
        if (container) container.remove();
        if (getRecent(key).length > 0) {
            const newGrid = createGrid(recentData, isEmoji);
            contentEl.prepend(newGrid);
        }
    };

    const switchTab = (active) => { 
        symbolsTab.classList.toggle('active', active === 'symbols'); 
        emojiTab.classList.toggle('active', active === 'emoji'); 
        symbolsContent.classList.toggle('hidden', active !== 'symbols'); 
        emojiContent.classList.toggle('hidden', active !== 'emoji'); 

        updateRecentTab(symbolsContent, RECENT_SYMBOLS_KEY, false);
        updateRecentTab(emojiContent, RECENT_EMOJI_KEY, true);
        
        searchInput.dispatchEvent(new Event('input'));
    };

    symbolsTab.addEventListener('click', () => switchTab('symbols'));
    emojiTab.addEventListener('click', () => switchTab('emoji'));
    switchTab('symbols');
}

export function cleanup() {
    if (timeoutId) clearTimeout(timeoutId);
}
