let timeoutId;
const RECENT_KEY = 'recentEmojiAndSymbols';
const RECENT_LIMIT = 18;

function getRecent() {
    return JSON.parse(localStorage.getItem(RECENT_KEY)) || [];
}

function addToRecent(symbol) {
    let recent = getRecent();
    // –£–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ
    recent = recent.filter(item => item.copy !== symbol.copy);
    recent.unshift(symbol);
    if (recent.length > RECENT_LIMIT) {
        recent.pop();
    }
    localStorage.setItem(RECENT_KEY, JSON.stringify(recent));
}

export function getHtml() {
    return `
        <div class="p-4 space-y-4">
            <div id="copy-notification" class="fixed top-24 left-1/2 -translate-x-1/2 bg-green-500 text-white py-2 px-4 rounded-full shadow-lg opacity-0 transition-opacity duration-300 z-50">–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!</div>
            
            <div class="relative mb-4">
                <input type="search" id="symbol-search" placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Ä–¥—Ü–µ, —Å—Ç—Ä–µ–ª–∫–∞, money...)" class="w-full p-3 pl-10 border rounded-full bg-gray-50 dark:bg-gray-700 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                <svg class="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
            </div>

            <div class="flex border-b border-gray-300 dark:border-gray-600">
                <button id="symbols-tab" class="tab-btn py-2 px-4 font-semibold border-b-2 active">–°–∏–º–≤–æ–ª—ã</button>
                <button id="emoji-tab" class="tab-btn py-2 px-4 font-semibold border-b-2">–≠–º–æ–¥–∑–∏</button>
            </div>

            <div id="symbols-content"></div>
            <div id="emoji-content" class="hidden"></div>
        </div>
    `;
}

export function init() {
    // –î–∞–Ω–Ω—ã–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const symbolsData = {
        '–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ': getRecent(),
        '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ': ['‚úì', '‚úó', '‚òÖ', '‚òÜ', '‚ô•', '‚ÇΩ', '‚Ç¨', '$', '‚Üí', '‚Üê', '¬©', '‚Ñ¢'],
        '–í–∞–ª—é—Ç—ã': ['‚Ç¨', '¬£', '¬•', '‚ÇΩ', '‚Ç¥', '$', '¬¢', '‚Ç©', '‚Ç™', '‚ÇÆ', '‚Çπ', '‚Çø', '‚Ç£', '‚Ç§', '‚Çß'],
        '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ': ['‚âà', '‚â†', '‚â§', '‚â•', '√∑', '√ó', '‚àí', '+', '‚àû', 'œÄ', '‚àö', '‚à´', '‚àë', '‚àÇ', '‚àÖ', '¬±', '¬∞', '¬π', '¬≤', '¬≥', '¬µ', '‚àÜ', '¬º', '¬Ω', '¬æ'],
        '–°—Ç—Ä–µ–ª–∫–∏': ['‚Üê', '‚Üë', '‚Üí', '‚Üì', '‚Üî', '‚Üï', '‚Üñ', '‚Üó', '‚Üò', '‚Üô', '‚á¶', '‚áß', '‚á®', '‚á©', '‚û•', '‚Ü∂', '‚Ü∑'],
        '–ü—É–Ω–∫—Ç—É–∞—Ü–∏—è –∏ –ø—Ä–æ—á–µ–µ': ['¬©', '¬Æ', '‚Ñ¢', '¬ß', '‚Ä¢', '‚Ä¶', '‚Äì', '‚Äî', '‚Äò', '‚Äô', '‚Äú', '‚Äù', '‚Äû', '¬´', '¬ª'],
        '–§–∏–≥—É—Ä—ã –∏ –∑–Ω–∞–∫–∏': ['‚òÖ', '‚òÜ', '‚úì', '‚úó', '‚ô•', '‚ô¶', '‚ô£', '‚ô†', '‚ô™', '‚ô´', '‚óè', '‚óã', '‚ñ†', '‚ñ°', '‚ñ≤', '‚ñº', '‚óÑ', '‚ñ∫', '‚óâ', '‚óä', '‚ó¶'],
        '–ü—Ä–æ–±–µ–ª—ã': [ { display: '–ü—É—Å—Ç–æ–π', copy: '\u00A0', title: '–ù–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª', keywords: '–ø—É—Å—Ç–æ–π –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π' }, { display: '–£–∑–∫–∏–π', copy: '\u2009', title: '–£–∑–∫–∏–π –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª', keywords: '—É–∑–∫–∏–π —Ç–æ–Ω–∫–∏–π' } ]
    };
    const emojiData = {
        '–°–º–∞–π–ª–∏–∫–∏ –∏ —ç–º–æ—Ü–∏–∏': [ {e: 'üòÄ', k: '—É–ª—ã–±–∫–∞'}, {e: 'üòÇ', k: '—Å–º–µ—Ö —Å–ª–µ–∑—ã'}, {e: '‚ù§Ô∏è', k: '—Å–µ—Ä–¥—Ü–µ –ª—é–±–æ–≤—å'}, {e: 'üëç', k: '–ª–∞–π–∫ –ø–∞–ª–µ—Ü –≤–≤–µ—Ä—Ö'}, {e: 'ü§î', k: '–º—ã—Å–ª–∏ –¥—É–º–∞—é'}, {e: 'üòé', k: '–∫—Ä—É—Ç–æ–π –æ—á–∫–∏'}, {e: 'ü•≥', k: '–ø—Ä–∞–∑–¥–Ω–∏–∫ –≤–µ—á–µ—Ä–∏–Ω–∫–∞'}, {e: 'üò≠', k: '–ø–ª–∞—á —Å–ª–µ–∑—ã'}, {e: 'üôè', k: '–º–æ–ª–∏—Ç–≤–∞ —Å–ø–∞—Å–∏–±–æ'}, {e: 'ü§Ø', k: '–≤–∑—Ä—ã–≤ –º–æ–∑–≥ —à–æ–∫'} /*... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ */ ],
        '–õ—é–¥–∏ –∏ —Ç–µ–ª–æ': [ {e: 'üëã', k: '–ø—Ä–∏–≤–µ—Ç –º–∞—à–µ—Ç'}, {e: 'üí™', k: '—Å–∏–ª–∞ –º—ã—à—Ü—ã'}, {e: 'üëÄ', k: '–≥–ª–∞–∑–∞ —Å–º–æ—Ç—Ä—é'}, {e: 'üß†', k: '–º–æ–∑–≥ —É–º'} ],
        '–ñ–∏–≤–æ—Ç–Ω—ã–µ –∏ –ø—Ä–∏—Ä–æ–¥–∞': [ {e: 'üê∂', k: '—Å–æ–±–∞–∫–∞'}, {e: 'üê±', k: '–∫–æ—à–∫–∞'}, {e: 'üå∏', k: '—Ü–≤–µ—Ç–æ–∫ –≤–µ—Å–Ω–∞'}, {e: 'üî•', k: '–æ–≥–æ–Ω—å –ø–ª–∞–º—è'}, {e: 'üåç', k: '–∑–µ–º–ª—è –ø–ª–∞–Ω–µ—Ç–∞'} ],
        '–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏': [ {e: 'üçï', k: '–ø–∏—Ü—Ü–∞'}, {e: 'üçî', k: '–±—É—Ä–≥–µ—Ä'}, {e: '‚òï', k: '–∫–æ—Ñ–µ —á–∞–π'}, {e: 'üéÇ', k: '—Ç–æ—Ä—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'} ]
    };
     // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–Ω –±—ã–ª –±—ã –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ
    const fullEmojiList = [].concat(...Object.values(emojiData).map(arr => arr.map(item => item.e))).join('');
    emojiData['–í—Å–µ —ç–º–æ–¥–∑–∏'] = fullEmojiList.split(/(?:)/u); // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —ç–º–æ–¥–∑–∏

    const symbolsTab = document.getElementById('symbols-tab'), emojiTab = document.getElementById('emoji-tab'), symbolsContent = document.getElementById('symbols-content'), emojiContent = document.getElementById('emoji-content'), notification = document.getElementById('copy-notification'), searchInput = document.getElementById('symbol-search');

    const createGrid = (data, isEmoji = false) => {
        const fragment = document.createDocumentFragment();
        for (const category in data) {
            if (category === '–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ' && data[category].length === 0) continue;

            const categoryDiv = document.createElement('div');
            categoryDiv.className = 'mb-4 category-container';
            categoryDiv.innerHTML = `<h3 class="text-lg font-semibold mb-2 border-b border-gray-300 dark:border-gray-600 pb-1 category-title">${category}</h3>`;
            
            const symbolsGrid = document.createElement('div');
            symbolsGrid.className = 'grid grid-cols-6 sm:grid-cols-8 md:grid-cols-10 gap-2';
            
            data[category].forEach(symbol => {
                const btn = document.createElement('button');
                const isObj = typeof symbol === 'object' && symbol !== null;
                const { display, copy, title, keywords } = isObj 
                    ? { display: symbol.display || symbol.e, copy: symbol.copy || symbol.e, title: symbol.title, keywords: symbol.keywords || symbol.k } 
                    : { display: symbol, copy: symbol, title: null, keywords: isEmoji ? findEmojiKeywords(symbol) : '' };

                btn.className = isObj && symbol.display ? 'flex items-center justify-center p-2 bg-gray-200 dark:bg-gray-700 rounded-lg hover:bg-blue-500 hover:text-white transition-colors text-sm' : 'flex items-center justify-center p-2 bg-gray-200 dark:bg-gray-700 rounded-lg hover:bg-blue-500 hover:text-white transition-colors text-xl';
                btn.textContent = display;
                btn.dataset.keywords = `${display} ${keywords || ''}`.toLowerCase();
                if(title) btn.title = title;
                
                btn.addEventListener('click', () => { 
                    const dataToSave = isObj ? symbol : {e: copy, k: keywords};
                    addToRecent(dataToSave);
                    navigator.clipboard.writeText(copy); 
                    notification.classList.remove('opacity-0'); 
                    if (timeoutId) clearTimeout(timeoutId); 
                    timeoutId = setTimeout(() => notification.classList.add('opacity-0'), 1000); 
                });
                symbolsGrid.appendChild(btn);
            });
            categoryDiv.appendChild(symbolsGrid);
            fragment.appendChild(categoryDiv);
        }
        return fragment;
    };
    
    // –§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö —ç–º–æ–¥–∑–∏
    function findEmojiKeywords(emoji) {
        for (const category of Object.values(emojiData)) {
            const found = category.find(item => typeof item === 'object' && item.e === emoji);
            if (found) return found.k;
        }
        return '';
    }

    symbolsContent.appendChild(createGrid(symbolsData, false));
    emojiContent.appendChild(createGrid(emojiData, true));
    
    searchInput.addEventListener('input', () => {
        const searchTerm = searchInput.value.toLowerCase().trim();
        document.querySelectorAll('#symbols-content, #emoji-content').forEach(content => {
            content.querySelectorAll('button').forEach(btn => {
                btn.classList.toggle('hidden', !btn.dataset.keywords.includes(searchTerm));
            });
            content.querySelectorAll('.category-container').forEach(container => {
                const hasVisibleButtons = !!container.querySelector('button:not(.hidden)');
                container.classList.toggle('hidden', !hasVisibleButtons);
            });
        });
    });

    const switchTab = (active) => { 
        symbolsTab.classList.toggle('active', active === 'symbols'); 
        emojiTab.classList.toggle('active', active === 'emoji'); 
        symbolsContent.classList.toggle('hidden', active !== 'symbols'); 
        emojiContent.classList.toggle('hidden', active !== 'emoji'); 
        // –û–±–Ω–æ–≤–ª—è–µ–º "–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ" –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const recentContainer = symbolsContent.querySelector('.category-container');
        if(recentContainer && recentContainer.querySelector('.category-title').textContent === '–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ') {
             recentContainer.remove();
             const updatedRecentData = {'–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ': getRecent()};
             if (getRecent().length > 0) {
                 symbolsContent.prepend(createGrid(updatedRecentData, false));
             }
        }
    };
    symbolsTab.addEventListener('click', () => switchTab('symbols'));
    emojiTab.addEventListener('click', () => switchTab('emoji'));
}

export function cleanup() {
    if (timeoutId) clearTimeout(timeoutId);
}
