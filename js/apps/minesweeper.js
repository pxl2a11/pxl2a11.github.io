/**
 * –§–∞–π–ª: minesweeper.js
 * –û–ø–∏—Å–∞–Ω–∏–µ: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã "–°–∞–ø–µ—Ä" —Å —É—Ä–æ–≤–Ω—è–º–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, —Ç–∞–π–º–µ—Ä–æ–º –∏ —Ñ—É–Ω–∫—Ü–∏–µ–π "–∞–∫–∫–æ—Ä–¥–∞".
 */

// --- –ù–ê–°–¢–†–û–ô–ö–ò –°–õ–û–ñ–ù–û–°–¢–ò ---
const DIFFICULTIES = {
    beginner: { rows: 9, cols: 9, mines: 10 },
    intermediate: { rows: 16, cols: 16, mines: 40 },
    expert: { rows: 30, cols: 16, mines: 99 },
};

let rows, cols, minesCount;
let board = []; // { isMine, isRevealed, isFlagged, neighbors }
let mineLocations = [];
let revealedCount = 0;
let flagsPlaced = 0;
let isGameOver = false;
let isFirstClick = true;
let timerInterval;
let timeElapsed = 0;

// --- –≠–õ–ï–ú–ï–ù–¢–´ DOM ---
const gameContainer = document.getElementById('game-container'); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å <div id="game-container"></div> –≤ HTML
const timerElement = document.getElementById('timer');
const mineCounterElement = document.getElementById('mine-counter');
const restartButton = document.getElementById('restart-btn');
const difficultySelector = document.getElementById('difficulty-selector');

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
 * @param {string} difficulty - –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ('beginner', 'intermediate', 'expert')
 */
function init(difficulty = 'beginner') {
    const settings = DIFFICULTIES[difficulty];
    rows = settings.rows;
    cols = settings.cols;
    minesCount = settings.mines;

    resetGame();
    createBoard();
    updateMineCounter();
}

/**
 * –°–±—Ä–æ—Å –≤—Å–µ—Ö –∏–≥—Ä–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 */
function resetGame() {
    isGameOver = false;
    isFirstClick = true;
    revealedCount = 0;
    flagsPlaced = 0;
    timeElapsed = 0;
    board = [];
    mineLocations = [];

    // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
    clearInterval(timerInterval);
    timerInterval = null;
    timerElement.textContent = '000';

    // –°–±—Ä–æ—Å –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    restartButton.textContent = 'üòä';
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ DOM
 */
function createBoard() {
    gameContainer.innerHTML = '';
    gameContainer.style.gridTemplateColumns = `repeat(${cols}, 30px)`;

    for (let r = 0; r < rows; r++) {
        board[r] = [];
        for (let c = 0; c < cols; c++) {
            board[r][c] = {
                isMine: false,
                isRevealed: false,
                isFlagged: false,
                neighborCount: 0,
            };

            const cell = document.createElement('div');
            cell.classList.add('cell');
            cell.dataset.row = r;
            cell.dataset.col = c;

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            cell.addEventListener('click', handleCellClick);
            cell.addEventListener('contextmenu', handleRightClick);
            cell.addEventListener('mousedown', () => {
                if (!isGameOver) restartButton.textContent = 'üòÆ';
            });
            cell.addEventListener('mouseup', () => {
                if (!isGameOver) restartButton.textContent = 'üòä';
            });

            gameContainer.appendChild(cell);
        }
    }
}

/**
 * –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω –Ω–∞ –ø–æ–ª–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
 * @param {number} initialRow - –†—è–¥, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∫–ª–∏–∫–Ω—É–ª–∏
 * @param {number} initialCol - –ö–æ–ª–æ–Ω–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∫–ª–∏–∫–Ω—É–ª–∏
 */
function placeMines(initialRow, initialCol) {
    let minesToPlace = minesCount;
    while (minesToPlace > 0) {
        const r = Math.floor(Math.random() * rows);
        const c = Math.floor(Math.random() * cols);

        // –ù–µ —Å—Ç–∞–≤–∏–º –º–∏–Ω—É –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫ –∏ –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º —É–∂–µ –µ—Å—Ç—å
        if ((r === initialRow && c === initialCol) || board[r][c].isMine) {
            continue;
        }

        board[r][c].isMine = true;
        mineLocations.push({ r, c });
        minesToPlace--;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π-–º–∏–Ω –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
    for (let r = 0; r < rows; r++) {
        for (let c = 0; c < cols; c++) {
            if (!board[r][c].isMine) {
                board[r][c].neighborCount = countNeighborMines(r, c);
            }
        }
    }
}

/**
 * –ü–æ–¥—Å—á–µ—Ç –º–∏–Ω –≤–æ–∫—Ä—É–≥ —è—á–µ–π–∫–∏
 * @param {number} row
 * @param {number} col
 * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
 */
function countNeighborMines(row, col) {
    let count = 0;
    for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
            if (i === 0 && j === 0) continue;
            const r = row + i;
            const c = col + j;
            if (r >= 0 && r < rows && c >= 0 && c < cols && board[r][c].isMine) {
                count++;
            }
        }
    }
    return count;
}


/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
 * @param {MouseEvent} event
 */
function handleCellClick(event) {
    const cellElement = event.target;
    const row = parseInt(cellElement.dataset.row);
    const col = parseInt(cellElement.dataset.col);
    const cellData = board[row][col];

    if (isGameOver || cellData.isFlagged) return;

    // –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫
    if (isFirstClick) {
        placeMines(row, col);
        startTimer();
        isFirstClick = false;
    }
    
    // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, –ø—Ä–æ–±—É–µ–º "–∞–∫–∫–æ—Ä–¥"
    if (cellData.isRevealed && cellData.neighborCount > 0) {
        handleChord(row, col);
        return;
    }

    if (cellData.isMine) {
        endGame(false); // –ü—Ä–æ–∏–≥—Ä—ã—à
        return;
    }

    revealCell(row, col);
    checkWinCondition();
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞)
 * @param {MouseEvent} event
 */
function handleRightClick(event) {
    event.preventDefault();
    if (isGameOver) return;

    const cellElement = event.target;
    const row = parseInt(cellElement.dataset.row);
    const col = parseInt(cellElement.dataset.col);
    const cellData = board[row][col];

    if (cellData.isRevealed) return;
    
    if (!isFirstClick && !timerInterval) {
        startTimer();
    }

    cellData.isFlagged = !cellData.isFlagged;
    cellElement.classList.toggle('flagged', cellData.isFlagged);
    cellElement.textContent = cellData.isFlagged ? 'üö©' : '';

    flagsPlaced += cellData.isFlagged ? 1 : -1;
    updateMineCounter();
}

/**
 * –û—Ç–∫—Ä—ã—Ç–∏–µ —è—á–µ–π–∫–∏
 * @param {number} row
 * @param {number} col
 */
function revealCell(row, col) {
    const cellData = board[row][col];
    if (row < 0 || row >= rows || col < 0 || col >= cols || cellData.isRevealed || cellData.isFlagged) {
        return;
    }

    cellData.isRevealed = true;
    revealedCount++;
    const cellElement = document.querySelector(`[data-row='${row}'][data-col='${col}']`);
    cellElement.classList.add('revealed');

    if (cellData.neighborCount > 0) {
        cellElement.textContent = cellData.neighborCount;
        cellElement.classList.add(`c${cellData.neighborCount}`);
    } else {
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–µ–π, –µ—Å–ª–∏ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è
        for (let i = -1; i <= 1; i++) {
            for (let j = -1; j <= 1; j++) {
                if (i === 0 && j === 0) continue;
                revealCell(row + i, col + j);
            }
        }
    }
}

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è "–∞–∫–∫–æ—Ä–¥–∞"
 * @param {number} row
 * @param {number} col
 */
function handleChord(row, col) {
    let flaggedNeighbors = 0;
    const neighbors = [];

    for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
            if (i === 0 && j === 0) continue;
            const r = row + i;
            const c = col + j;
            if (r >= 0 && r < rows && c >= 0 && c < cols) {
                neighbors.push({r, c});
                if (board[r][c].isFlagged) {
                    flaggedNeighbors++;
                }
            }
        }
    }
    
    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–ª–∞–≥–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–∏—Ñ—Ä–æ–π, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π
    if (flaggedNeighbors === board[row][col].neighborCount) {
        neighbors.forEach(n => {
            const neighborData = board[n.r][n.c];
            if (!neighborData.isRevealed && !neighborData.isFlagged) {
                 if (neighborData.isMine) {
                    endGame(false);
                    return;
                }
                revealCell(n.r, n.c);
            }
        });
        checkWinCondition();
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –º–∏–Ω
 */
function updateMineCounter() {
    const remaining = minesCount - flagsPlaced;
    mineCounterElement.textContent = String(remaining).padStart(3, '0');
}

/**
 * –õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
 * @param {boolean} isWin - true, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª
 */
function endGame(isWin) {
    isGameOver = true;
    clearInterval(timerInterval);
    timerInterval = null;

    if (isWin) {
        restartButton.textContent = 'üòé';
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–±–µ–¥—ã
    } else {
        restartButton.textContent = 'üòµ';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
        mineLocations.forEach(loc => {
            const cellElement = document.querySelector(`[data-row='${loc.r}'][data-col='${loc.c}']`);
            if (!board[loc.r][loc.c].isFlagged) {
                cellElement.classList.add('mine');
                cellElement.textContent = 'üí£';
            }
        });
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–≤–µ—Ä–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏
         for (let r = 0; r < rows; r++) {
            for (let c = 0; c < cols; c++) {
                if (board[r][c].isFlagged && !board[r][c].isMine) {
                    const cellElement = document.querySelector(`[data-row='${r}'][data-col='${c}']`);
                    cellElement.classList.add('mine-wrong');
                }
            }
         }
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
 */
function checkWinCondition() {
    if (!isGameOver && (rows * cols - revealedCount) === minesCount) {
        endGame(true);
    }
}

// --- –¢–∞–π–º–µ—Ä ---
function startTimer() {
    if (timerInterval) return;
    timerInterval = setInterval(() => {
        timeElapsed++;
        timerElement.textContent = String(timeElapsed).padStart(3, '0');
    }, 1000);
}

// --- –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
restartButton.addEventListener('click', () => init(difficultySelector.value));
difficultySelector.addEventListener('change', (e) => init(e.target.value));


// --- –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ---
document.addEventListener('DOMContentLoaded', () => {
    init('beginner');
});
