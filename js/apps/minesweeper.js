// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è ---
let rows, cols, mineCount;
let board = []; // 2D –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —è—á–µ–µ–∫: { isMine, isRevealed, isFlagged, neighborMines }
let mineLocations = [];
let flagsPlaced = 0;
let cellsRevealed = 0;
let gameOver = false;
let firstClick = true;
let timerInterval;
let startTime;

// --- DOM-—ç–ª–µ–º–µ–Ω—Ç—ã ---
let boardContainer, flagsCountEl, timerEl, statusEl, newGameBtn;

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–°–∞–ø–µ—Ä".
 * @returns {string} HTML-—Ä–∞–∑–º–µ—Ç–∫–∞.
 */
export function getHtml() {
    return `
        <div class="space-y-4 max-w-2xl mx-auto">
            <!-- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è -->
            <div class="p-4 bg-gray-100 dark:bg-gray-800 rounded-lg shadow-md">
                <div class="grid grid-cols-2 sm:grid-cols-4 gap-4 items-center">
                    <div class="col-span-2 sm:col-span-4 text-center sm:text-left mb-2 sm:mb-0">
                        <p class="font-semibold text-lg">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã</p>
                    </div>
                    <div>
                        <label for="ms-rows" class="block text-sm font-medium text-gray-700 dark:text-gray-300">–†—è–¥—ã</label>
                        <input type="number" id="ms-rows" value="10" min="5" max="30" class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2">
                    </div>
                    <div>
                        <label for="ms-cols" class="block text-sm font-medium text-gray-700 dark:text-gray-300">–ö–æ–ª–æ–Ω–∫–∏</label>
                        <input type="number" id="ms-cols" value="10" min="5" max="30" class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2">
                    </div>
                    <div>
                        <label for="ms-mines" class="block text-sm font-medium text-gray-700 dark:text-gray-300">–ú–∏–Ω—ã</label>
                        <input type="number" id="ms-mines" value="15" min="1" max="200" class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2">
                    </div>
                    <button id="ms-new-game-btn" class="col-span-2 sm:col-span-1 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition-colors h-10 mt-1 sm:mt-6">
                        –ù–æ–≤–∞—è –∏–≥—Ä–∞
                    </button>
                </div>
                 <div class="flex justify-center gap-2 mt-4 flex-wrap">
                    <button class="ms-difficulty-btn" data-rows="9" data-cols="9" data-mines="10">–õ–µ–≥–∫–æ</button>
                    <button class="ms-difficulty-btn" data-rows="16" data-cols="16" data-mines="40">–°—Ä–µ–¥–Ω–µ</button>
                    <button class="ms-difficulty-btn" data-rows="16" data-cols="30" data-mines="99">–°–ª–æ–∂–Ω–æ</button>
                </div>
            </div>

            <!-- –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã -->
            <div class="flex justify-between items-center p-3 bg-white dark:bg-gray-900 rounded-lg shadow">
                <div class="flex items-center gap-2">
                    <svg class="w-6 h-6 text-red-500" fill="currentColor" viewBox="0 0 20 20"><path d="M4 3a2 2 0 100 4h12a2 2 0 100-4H4z"></path><path fill-rule="evenodd" d="M3 8h14v7a2 2 0 01-2 2H5a2 2 0 01-2-2V8zm5 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
                    <span id="ms-flags-count" class="font-mono text-xl font-bold">0</span>
                </div>
                <div id="ms-status-indicator" class="font-bold text-xl">üôÇ</div>
                <div class="flex items-center gap-2">
                    <svg class="w-6 h-6 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                    <span id="ms-timer" class="font-mono text-xl font-bold">0</span>
                </div>
            </div>

            <!-- –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ -->
            <div id="minesweeper-board-container" class="flex justify-center p-2 bg-gray-300 dark:bg-gray-700 rounded-lg shadow-inner overflow-auto">
                 <div id="minesweeper-board" class="grid" style="user-select: none;"></div>
            </div>
        </div>
    `;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 */
export function init() {
    // –ù–∞—Ö–æ–¥–∏–º DOM-—ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∏—Ö –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    boardContainer = document.getElementById('minesweeper-board');
    flagsCountEl = document.getElementById('ms-flags-count');
    timerEl = document.getElementById('ms-timer');
    statusEl = document.getElementById('ms-status-indicator');
    newGameBtn = document.getElementById('ms-new-game-btn');

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    newGameBtn.addEventListener('click', startGame);
    boardContainer.addEventListener('click', handleCellClick);
    boardContainer.addEventListener('contextmenu', handleRightClick);

    // –ö–Ω–æ–ø–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    document.querySelectorAll('.ms-difficulty-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const { rows, cols, mines } = e.target.dataset;
            document.getElementById('ms-rows').value = rows;
            document.getElementById('ms-cols').value = cols;
            document.getElementById('ms-mines').value = mines;
            startGame();
        });
    });

    startGame();
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 */
export function cleanup() {
    clearInterval(timerInterval);
    timerInterval = null;
    // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –Ω–æ –æ–Ω–∏ —É–¥–∞–ª—è—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å DOM
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É.
 */
function startGame() {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const rowsInput = document.getElementById('ms-rows');
    const colsInput = document.getElementById('ms-cols');
    const minesInput = document.getElementById('ms-mines');

    rows = parseInt(rowsInput.value);
    cols = parseInt(colsInput.value);
    mineCount = parseInt(minesInput.value);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (mineCount >= rows * cols) {
        alert("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ, —á–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫.");
        mineCount = rows * cols - 1;
        minesInput.value = mineCount;
    }

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    gameOver = false;
    firstClick = true;
    flagsPlaced = 0;
    cellsRevealed = 0;
    board = [];
    mineLocations = [];

    // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞
    clearInterval(timerInterval);
    timerInterval = null;
    timerEl.textContent = '0';
    statusEl.textContent = 'üôÇ';

    updateFlagsCount();
    createBoardDOM();
}

/**
 * –°–æ–∑–¥–∞–µ—Ç DOM-—Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
 */
function createBoardDOM() {
    boardContainer.innerHTML = '';
    boardContainer.style.gridTemplateColumns = `repeat(${cols}, minmax(0, 1fr))`;
    boardContainer.style.gridTemplateRows = `repeat(${rows}, minmax(0, 1fr))`;
    
    const cellSize = Math.min(35, Math.floor(Math.min(window.innerWidth - 60, 672) / cols));
    
    for (let r = 0; r < rows; r++) {
        board[r] = [];
        for (let c = 0; c < cols; c++) {
            const cell = document.createElement('div');
            cell.dataset.row = r;
            cell.dataset.col = c;
            cell.className = 'ms-cell';
            cell.style.width = `${cellSize}px`;
            cell.style.height = `${cellSize}px`;
            cell.style.fontSize = `${cellSize * 0.6}px`;

            boardContainer.appendChild(cell);
            board[r][c] = {
                isMine: false,
                isRevealed: false,
                isFlagged: false,
                neighborMines: 0,
                element: cell,
            };
        }
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–µ–≤–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ.
 * @param {Event} e - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞.
 */
function handleCellClick(e) {
    const cellEl = e.target.closest('.ms-cell');
    if (gameOver || !cellEl || cellEl.classList.contains('revealed')) return;

    const row = parseInt(cellEl.dataset.row);
    const col = parseInt(cellEl.dataset.col);
    const cell = board[row][col];

    if (cell.isFlagged) return;

    if (firstClick) {
        placeMines(row, col);
        calculateAllNeighbors();
        startTimer();
        firstClick = false;
    }

    if (cell.isMine) {
        endGame(false);
        return;
    }

    revealCell(row, col);
    checkWinCondition();
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞).
 * @param {Event} e - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞.
 */
function handleRightClick(e) {
    e.preventDefault();
    if (gameOver) return;
    
    const cellEl = e.target.closest('.ms-cell');
    if (!cellEl || cellEl.classList.contains('revealed')) return;

    const row = parseInt(cellEl.dataset.row);
    const col = parseInt(cellEl.dataset.col);
    const cell = board[row][col];

    toggleFlag(cell);
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ —Å–Ω–∏–º–∞–µ—Ç —Ñ–ª–∞–≥ —Å —è—á–µ–π–∫–∏.
 * @param {object} cell - –û–±—ä–µ–∫—Ç —è—á–µ–π–∫–∏.
 */
function toggleFlag(cell) {
    if (!cell.isFlagged && flagsPlaced < mineCount) {
        cell.isFlagged = true;
        cell.element.innerHTML = 'üö©';
        flagsPlaced++;
    } else if (cell.isFlagged) {
        cell.isFlagged = false;
        cell.element.innerHTML = '';
        flagsPlaced--;
    }
    updateFlagsCount();
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —è—á–µ–π–∫—É –∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —Å–æ—Å–µ–¥–Ω–∏–µ.
 * @param {number} row - –†—è–¥ —è—á–µ–π–∫–∏.
 * @param {number} col - –ö–æ–ª–æ–Ω–∫–∞ —è—á–µ–π–∫–∏.
 */
function revealCell(row, col) {
    if (row < 0 || row >= rows || col < 0 || col >= cols) return;

    const cell = board[row][col];
    if (cell.isRevealed || cell.isFlagged || cell.isMine) return;

    cell.isRevealed = true;
    cell.element.classList.add('revealed');
    cellsRevealed++;

    if (cell.neighborMines > 0) {
        cell.element.textContent = cell.neighborMines;
        cell.element.classList.add(`ms-c${cell.neighborMines}`);
    } else {
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–µ–π, –µ—Å–ª–∏ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è
        for (let rOffset = -1; rOffset <= 1; rOffset++) {
            for (let cOffset = -1; cOffset <= 1; cOffset++) {
                if (rOffset === 0 && cOffset === 0) continue;
                revealCell(row + rOffset, col + cOffset);
            }
        }
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã.
 */
function checkWinCondition() {
    if (cellsRevealed === rows * cols - mineCount) {
        endGame(true);
    }
}

/**
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É.
 * @param {boolean} isWin - `true`, –µ—Å–ª–∏ –∏–≥—Ä–∞ –≤—ã–∏–≥—Ä–∞–Ω–∞.
 */
function endGame(isWin) {
    gameOver = true;
    clearInterval(timerInterval);
    timerInterval = null;
    statusEl.textContent = isWin ? 'üòé' : 'üòµ';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
    for (const loc of mineLocations) {
        const cell = board[loc.row][loc.col];
        if (!cell.isRevealed) {
            cell.element.classList.add(cell.isFlagged ? 'correct-flag' : 'mine');
            if(!cell.isFlagged) cell.element.innerHTML = 'üí£';
        }
    }

    if (!isWin) {
        // –ü–æ–º–µ—á–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏
        for (let r = 0; r < rows; r++) {
            for (let c = 0; c < cols; c++) {
                const cell = board[r][c];
                if (cell.isFlagged && !cell.isMine) {
                    cell.element.classList.add('wrong-flag');
                }
            }
        }
    }
}

/**
 * –†–∞–∑–º–µ—â–∞–µ—Ç –º–∏–Ω—ã –Ω–∞ –ø–æ–ª–µ, –∏–∑–±–µ–≥–∞—è –ø–µ—Ä–≤—É—é –∫–ª–∏–∫–Ω—É—Ç—É—é —è—á–µ–π–∫—É.
 * @param {number} initialRow - –†—è–¥ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞.
 * @param {number} initialCol - –ö–æ–ª–æ–Ω–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞.
 */
function placeMines(initialRow, initialCol) {
    let minesToPlace = mineCount;
    while (minesToPlace > 0) {
        const r = Math.floor(Math.random() * rows);
        const c = Math.floor(Math.random() * cols);

        if ((r === initialRow && c === initialCol) || board[r][c].isMine) {
            continue;
        }

        board[r][c].isMine = true;
        mineLocations.push({ row: r, col: c });
        minesToPlace--;
    }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω-—Å–æ—Å–µ–¥–µ–π –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫.
 */
function calculateAllNeighbors() {
    for (let r = 0; r < rows; r++) {
        for (let c = 0; c < cols; c++) {
            if (board[r][c].isMine) continue;
            let count = 0;
            for (let rOffset = -1; rOffset <= 1; rOffset++) {
                for (let cOffset = -1; cOffset <= 1; cOffset++) {
                    const newR = r + rOffset;
                    const newC = c + cOffset;
                    if (newR >= 0 && newR < rows && newC >= 0 && newC < cols && board[newR][newC].isMine) {
                        count++;
                    }
                }
            }
            board[r][c].neighborMines = count;
        }
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ñ–ª–∞–≥–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
 */
function updateFlagsCount() {
    flagsCountEl.textContent = mineCount - flagsPlaced;
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Ç–∞–π–º–µ—Ä.
 */
function startTimer() {
    startTime = Date.now();
    timerInterval = setInterval(() => {
        const seconds = Math.floor((Date.now() - startTime) / 1000);
        timerEl.textContent = seconds;
    }, 1000);
}
