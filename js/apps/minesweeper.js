/**
 * 35–§–∞–π–ª: /apps/minesweeper.js
 * –û–ø–∏—Å–∞–Ω–∏–µ: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã "–°–∞–ø–µ—Ä" –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Mini Apps.
 * –í–∫–ª—é—á–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, —Ç–∞–π–º–µ—Ä, –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏ —Ñ—É–Ω–∫—Ü–∏—é "–∞–∫–∫–æ—Ä–¥".
 */

// --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ú–û–î–£–õ–Ø ---

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
const DIFFICULTIES = {
    beginner: { rows: 9, cols: 9, mines: 10, name: '–ù–æ–≤–∏—á–æ–∫' },
    intermediate: { rows: 16, cols: 16, mines: 40, name: '–õ—é–±–∏—Ç–µ–ª—å' },
    expert: { rows: 16, cols: 30, mines: 99, name: '–≠–∫—Å–ø–µ—Ä—Ç' },
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let currentDifficulty = 'beginner';
let rows, cols, minesCount;
let board = []; // –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —è—á–µ–µ–∫: { isMine, isRevealed, isFlagged, neighborCount }
let mineLocations = [];
let revealedCount = 0;
let flagsPlaced = 0;
let isGameOver = false;
let isFirstClick = true;
let timerInterval = null;
let timeElapsed = 0;

// –°—Å—ã–ª–∫–∏ –Ω–∞ DOM-—ç–ª–µ–º–µ–Ω—Ç—ã (–±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ init)
let gameBoardElement, mineCounterElement, timerElement, restartButton, difficultySelector;

// --- –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú–´–ï –§–£–ù–ö–¶–ò–ò ---

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã.
 * @returns {string} HTML-—Å—Ç—Ä–æ–∫–∞
 */
export function getHtml() {
    return `
        <div class="minesweeper-container bg-gray-200 dark:bg-gray-700 p-4 rounded-lg shadow-inner">
            <!-- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è -->
            <div class="grid grid-cols-3 gap-4 items-center mb-4 p-2 bg-gray-300 dark:bg-gray-800 rounded-md">
                <div id="mine-counter" class="font-mono text-2xl sm:text-3xl text-red-500 bg-black rounded-md text-center py-1"></div>
                <button id="restart-btn" class="text-3xl sm:text-4xl text-center hover:scale-110 transition-transform">üòä</button>
                <div id="timer" class="font-mono text-2xl sm:text-3xl text-red-500 bg-black rounded-md text-center py-1"></div>
            </div>

            <!-- –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ -->
            <div class="mb-4 text-center">
                <select id="difficulty-selector" class="p-2 rounded-md bg-white dark:bg-gray-600 border border-gray-400 dark:border-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="beginner">–ù–æ–≤–∏—á–æ–∫ (9x9, 10 –º–∏–Ω)</option>
                    <option value="intermediate">–õ—é–±–∏—Ç–µ–ª—å (16x16, 40 –º–∏–Ω)</option>
                    <option value="expert">–≠–∫—Å–ø–µ—Ä—Ç (16x30, 99 –º–∏–Ω)</option>
                </select>
            </div>

            <!-- –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ -->
            <div id="minesweeper-board" class="mx-auto w-max select-none">
                <!-- –Ø—á–µ–π–∫–∏ –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–¥–µ—Å—å -->
            </div>
        </div>
    `;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É, –Ω–∞—Ö–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –≤–µ—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
 */
export function init() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOM
    gameBoardElement = document.getElementById('minesweeper-board');
    mineCounterElement = document.getElementById('mine-counter');
    timerElement = document.getElementById('timer');
    restartButton = document.getElementById('restart-btn');
    difficultySelector = document.getElementById('difficulty-selector');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    restartButton.addEventListener('click', () => startGame(currentDifficulty));
    difficultySelector.addEventListener('change', (e) => {
        currentDifficulty = e.target.value;
        startGame(currentDifficulty);
    });
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –≤—Å–µ–º –ø–æ–ª–µ
    gameBoardElement.addEventListener('contextmenu', e => e.preventDefault());

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∏–≥—Ä—É
    startGame(currentDifficulty);
}

/**
 * –û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã (—Ç–∞–π–º–µ—Ä—ã) –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 */
export function cleanup() {
    if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
    }
}

// --- –í–ù–£–¢–†–ï–ù–ù–Ø–Ø –õ–û–ì–ò–ö–ê –ò–ì–†–´ ---

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é.
 * @param {string} difficultyKey - –ö–ª—é—á —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ('beginner', 'intermediate', 'expert')
 */
function startGame(difficultyKey) {
    const settings = DIFFICULTIES[difficultyKey];
    rows = settings.rows;
    cols = settings.cols;
    minesCount = settings.mines;

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    isGameOver = false;
    isFirstClick = true;
    revealedCount = 0;
    flagsPlaced = 0;
    timeElapsed = 0;
    board = [];
    mineLocations = [];

    // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
    cleanup(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    timerElement.textContent = String(timeElapsed).padStart(3, '0');
    
    // –°–±—Ä–æ—Å UI
    restartButton.textContent = 'üòä';
    updateMineCounter();
    createBoard();
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –≤ DOM –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ board.
 */
function createBoard() {
    gameBoardElement.innerHTML = '';
    gameBoardElement.style.display = 'grid';
    gameBoardElement.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
    gameBoardElement.style.width = `${cols * 28}px`; // 28px = 24px width + 4px gap, –ø–æ–¥–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä

    for (let r = 0; r < rows; r++) {
        board[r] = [];
        for (let c = 0; c < cols; c++) {
            board[r][c] = {
                isMine: false,
                isRevealed: false,
                isFlagged: false,
                neighborCount: 0,
            };

            const cell = document.createElement('div');
            cell.className = "h-7 w-7 flex items-center justify-center font-bold text-lg bg-gray-400 dark:bg-gray-600 rounded-sm shadow-[inset_2px_2px_2px_rgba(255,255,255,0.4),inset_-2px_-2px_2px_rgba(0,0,0,0.4)] transition-all duration-100";
            cell.dataset.row = r;
            cell.dataset.col = c;

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—ã—à–∏ –¥–ª—è —è—á–µ–π–∫–∏
            cell.addEventListener('click', handleCellClick);
            cell.addEventListener('contextmenu', handleRightClick);
            cell.addEventListener('mousedown', (e) => {
                if (!isGameOver && e.button === 0) { // –¢–æ–ª—å–∫–æ –¥–ª—è –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
                    restartButton.textContent = 'üòÆ';
                }
            });
            cell.addEventListener('mouseup', () => {
                if (!isGameOver) {
                    restartButton.textContent = 'üòä';
                }
            });
             cell.addEventListener('mouseleave', () => {
                if (!isGameOver) {
                    restartButton.textContent = 'üòä';
                }
            });

            gameBoardElement.appendChild(cell);
        }
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∏–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞.
 * @param {number} initialRow - –†—è–¥, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∫–ª–∏–∫–Ω—É–ª–∏.
 * @param {number} initialCol - –ö–æ–ª–æ–Ω–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∫–ª–∏–∫–Ω—É–ª–∏.
 */
function placeMines(initialRow, initialCol) {
    let minesToPlace = minesCount;
    while (minesToPlace > 0) {
        const r = Math.floor(Math.random() * rows);
        const c = Math.floor(Math.random() * cols);

        // –ú–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –º–µ—Å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞ –∏–ª–∏ —Ç–∞–º, –≥–¥–µ —É–∂–µ –µ—Å—Ç—å –º–∏–Ω–∞
        if ((r === initialRow && c === initialCol) || board[r][c].isMine) {
            continue;
        }

        board[r][c].isMine = true;
        mineLocations.push({ r, c });
        minesToPlace--;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–∏—Ñ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
    for (let r = 0; r < rows; r++) {
        for (let c = 0; c < cols; c++) {
            if (!board[r][c].isMine) {
                board[r][c].neighborCount = countNeighborMines(r, c);
            }
        }
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–µ–≤–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ.
 * @param {MouseEvent} event
 */
function handleCellClick(event) {
    const cellElement = event.target;
    const row = parseInt(cellElement.dataset.row);
    const col = parseInt(cellElement.dataset.col);
    const cellData = board[row][col];

    if (isGameOver || cellData.isFlagged) return;

    // –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ
    if (isFirstClick) {
        placeMines(row, col);
        startTimer();
        isFirstClick = false;
    }

    // "–ê–∫–∫–æ—Ä–¥" - –∫–ª–∏–∫ –ø–æ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–π —è—á–µ–π–∫–µ —Å —Ü–∏—Ñ—Ä–æ–π
    if (cellData.isRevealed && cellData.neighborCount > 0) {
        handleChord(row, col);
        return;
    }

    // –ö–ª–∏–∫ –ø–æ –º–∏–Ω–µ
    if (cellData.isMine) {
        endGame(false); // –ü—Ä–æ–∏–≥—Ä—ã—à
        revealMine(cellElement, true); // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–∂–∞—Ç—É—é –º–∏–Ω—É
        return;
    }
    
    revealCell(row, col);
    checkWinCondition();
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞).
 * @param {MouseEvent} event
 */
function handleRightClick(event) {
    event.preventDefault(); // –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
    if (isGameOver) return;

    const cellElement = event.target;
    const row = parseInt(cellElement.dataset.row);
    const col = parseInt(cellElement.dataset.col);
    const cellData = board[row][col];

    if (cellData.isRevealed) return;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    if (isFirstClick) {
        startTimer();
        isFirstClick = false; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º —Ö–æ–¥–æ–º
    }

    cellData.isFlagged = !cellData.isFlagged;
    cellElement.textContent = cellData.isFlagged ? 'üö©' : '';
    flagsPlaced += cellData.isFlagged ? 1 : -1;
    updateMineCounter();
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —è—á–µ–π–∫–∏.
 * @param {number} row
 * @param {number} col
 */
function revealCell(row, col) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —è—á–µ–π–∫–∏
    if (row < 0 || row >= rows || col < 0 || col >= cols || board[row][col].isRevealed || board[row][col].isFlagged) {
        return;
    }

    const cellData = board[row][col];
    cellData.isRevealed = true;
    revealedCount++;

    const cellElement = gameBoardElement.querySelector(`[data-row='${row}'][data-col='${col}']`);
    cellElement.className = "h-7 w-7 flex items-center justify-center font-bold text-lg bg-gray-300 dark:bg-gray-500 rounded-sm border border-gray-400";

    if (cellData.neighborCount > 0) {
        cellElement.textContent = cellData.neighborCount;
        cellElement.classList.add(`c${cellData.neighborCount}`); // –ö–ª–∞—Å—Å –¥–ª—è —Ü–≤–µ—Ç–∞ —Ü–∏—Ñ—Ä—ã
    } else {
        // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–µ–π
        for (let i = -1; i <= 1; i++) {
            for (let j = -1; j <= 1; j++) {
                if (i === 0 && j === 0) continue;
                revealCell(row + i, col + j);
            }
        }
    }
}

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è "–∞–∫–∫–æ—Ä–¥–∞": –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫.
 * @param {number} row
 * @param {number} col
 */
function handleChord(row, col) {
    let flaggedNeighbors = 0;
    const neighbors = [];

    // –ü–æ–¥—Å—á–µ—Ç —Ñ–ª–∞–≥–æ–≤ –∏ —Å–±–æ—Ä —Å–æ—Å–µ–¥–µ–π
    for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
            if (i === 0 && j === 0) continue;
            const r = row + i;
            const c = col + j;
            if (r >= 0 && r < rows && c >= 0 && c < cols) {
                neighbors.push({ r, c });
                if (board[r][c].isFlagged) {
                    flaggedNeighbors++;
                }
            }
        }
    }
    
    // –ï—Å–ª–∏ —á–∏—Å–ª–æ —Ñ–ª–∞–≥–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–∏—Ñ—Ä–æ–π, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    if (flaggedNeighbors === board[row][col].neighborCount) {
        for (const n of neighbors) {
            if (!board[n.r][n.c].isRevealed && !board[n.r][n.c].isFlagged) {
                if (board[n.r][n.c].isMine) {
                    endGame(false); // –ü—Ä–æ–∏–≥—Ä—ã—à, –µ—Å–ª–∏ —Ñ–ª–∞–≥ —Å—Ç–æ—è–ª –Ω–µ–≤–µ—Ä–Ω–æ
                    revealMine(gameBoardElement.querySelector(`[data-row='${n.r}'][data-col='${n.c}']`), true);
                    return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                }
                revealCell(n.r, n.c);
            }
        }
        checkWinCondition();
    }
}

/**
 * –õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã.
 * @param {boolean} isWin - true, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª.
 */
function endGame(isWin) {
    isGameOver = true;
    cleanup(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä

    if (isWin) {
        restartButton.textContent = 'üòé';
        mineCounterElement.textContent = 'WIN!';
    } else {
        restartButton.textContent = 'üòµ';
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∏–Ω—ã
        mineLocations.forEach(loc => {
            const cell = gameBoardElement.querySelector(`[data-row='${loc.r}'][data-col='${loc.c}']`);
            if (!board[loc.r][loc.c].isFlagged) {
                revealMine(cell, false);
            }
        });
        // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏
         for (let r = 0; r < rows; r++) {
            for (let c = 0; c < cols; c++) {
                if (board[r][c].isFlagged && !board[r][c].isMine) {
                     const cell = gameBoardElement.querySelector(`[data-row='${r}'][data-col='${c}']`);
                     cell.textContent = '‚ùå';
                }
            }
         }
    }
}

/**
 * –í–∏–∑—É–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–∏–Ω—É –Ω–∞ –ø–æ–ª–µ.
 * @param {HTMLElement} cellElement - –≠–ª–µ–º–µ–Ω—Ç —è—á–µ–π–∫–∏.
 * @param {boolean} isTrigger - –ë—ã–ª–∞ –ª–∏ —ç—Ç–æ –º–∏–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª –∏–≥—Ä–æ–∫.
 */
function revealMine(cellElement, isTrigger) {
    cellElement.textContent = 'üí£';
    cellElement.className = `h-7 w-7 flex items-center justify-center text-lg rounded-sm ${isTrigger ? 'bg-red-500' : 'bg-gray-300 dark:bg-gray-500'}`;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã.
 */
function checkWinCondition() {
    if (!isGameOver && (rows * cols - revealedCount) === minesCount) {
        endGame(true);
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–∏–Ω.
 */
function updateMineCounter() {
    const remaining = minesCount - flagsPlaced;
    mineCounterElement.textContent = String(remaining).padStart(3, '0');
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Ç–∞–π–º–µ—Ä.
 */
function startTimer() {
    if (timerInterval) return;
    timerInterval = setInterval(() => {
        timeElapsed++;
        if (timeElapsed <= 999) { // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
            timerElement.textContent = String(timeElapsed).padStart(3, '0');
        }
    }, 1000);
}

/**
 * –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω-—Å–æ—Å–µ–¥–µ–π –¥–ª—è —è—á–µ–π–∫–∏.
 */
function countNeighborMines(row, col) {
    let count = 0;
    for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
            const r = row + i;
            const c = col + j;
            if (r >= 0 && r < rows && c >= 0 && c < cols && board[r][c].isMine) {
                count++;
            }
        }
    }
    return count;
}
