let video, canvasElement, canvas, resultContainer, statusMessage;
let stream;
let animationFrameId;
let qrWorker; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω–∞—à–µ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞

function drawLine(begin, end, color) {
    canvas.beginPath();
    canvas.moveTo(begin.x, begin.y);
    canvas.lineTo(end.x, end.y);
    canvas.lineWidth = 4;
    canvas.strokeStyle = color;
    canvas.stroke();
}

// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞
function handleQrCode(code) {
    if (code) {
        drawLine(code.location.topLeftCorner, code.location.topRightCorner, "#FF3B58");
        drawLine(code.location.topRightCorner, code.location.bottomRightCorner, "#FF3B58");
        drawLine(code.location.bottomRightCorner, code.location.bottomLeftCorner, "#FF3B58");
        drawLine(code.location.bottomLeftCorner, code.location.topLeftCorner, "#FF3B58");
        
        resultContainer.classList.remove('hidden');
        statusMessage.textContent = "‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω!";
        
        if (code.data.startsWith('http://') || code.data.startsWith('https://')) {
            resultContainer.innerHTML = `–†–µ–∑—É–ª—å—Ç–∞—Ç: <a href="${code.data}" target="_blank" rel="noopener noreferrer" class="text-blue-500 hover:underline">${code.data}</a>`;
        } else {
             resultContainer.textContent = `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${code.data}`;
        }

        cleanup(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞
    }
}

function tick() {
    if (video.readyState === video.HAVE_ENOUGH_DATA) {
        statusMessage.textContent = "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...";
        canvasElement.height = video.videoHeight;
        canvasElement.width = video.videoWidth;
        canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);
        const imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);
        
        // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
        // –í–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ jsQR() –Ω–∞–ø—Ä—è–º—É—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–æ—Ä–∫–µ—Ä.
        // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç imageData. –í–æ—Ä–∫–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ canvas –Ω–∞–ø—Ä—è–º—É—é.
        qrWorker.postMessage(imageData);
    }
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–¥—Ä—ã, –ø–æ–∫–∞ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    animationFrameId = requestAnimationFrame(tick);
}

function startScan() {
    if (stream) {
        cleanup();
        return;
    }
    
    resultContainer.classList.add('hidden');
    statusMessage.textContent = "‚åõ –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ...";
    navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } })
        .then(function(s) {
            stream = s;
            video.srcObject = stream;
            video.setAttribute("playsinline", true);
            video.play();
            animationFrameId = requestAnimationFrame(tick);
        })
        .catch(function(err) {
            console.error(err);
            statusMessage.textContent = "‚õîÔ∏è –û—à–∏–±–∫–∞: –ö–∞–º–µ—Ä–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.";
        });
}

export function getHtml() {
    return `
        <div class="flex flex-col items-center space-y-4">
            <p id="qr-status-message" class="text-gray-600 dark:text-gray-400">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.</p>
            <div class="w-full max-w-md bg-gray-900 rounded-lg overflow-hidden relative">
                <video id="qr-video" class="w-full h-auto" playsinline></video>
                <canvas id="qr-canvas" class="absolute top-0 left-0 w-full h-full"></canvas>
            </div>
            <button id="start-scan-btn" class="px-6 py-2 bg-blue-500 text-white font-semibold rounded-lg hover:bg-blue-600 transition-colors">–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</button>
            <div id="qr-result-container" class="hidden mt-4 p-3 bg-green-100 dark:bg-green-900 border border-green-300 dark:border-green-700 rounded-lg w-full max-w-md text-center break-all"></div>
        </div>
    `;
}

export function init() {
    video = document.getElementById("qr-video");
    canvasElement = document.getElementById("qr-canvas");
    canvas = canvasElement.getContext("2d");
    resultContainer = document.getElementById("qr-result-container");
    statusMessage = document.getElementById("qr-status-message");

    // --- –ù–û–í–´–ô –ö–û–î ---
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ—Ä–∫–µ—Ä
    qrWorker = new Worker('qr-worker.js');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞
    qrWorker.onmessage = function(event) {
        const code = event.data;
        handleQrCode(code); // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    };

    document.getElementById("start-scan-btn").addEventListener('click', startScan);
}

export function cleanup() {
    if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
        animationFrameId = null;
    }
    if (stream) {
        stream.getTracks().forEach(track => track.stop());
        stream = null;
        video.srcObject = null;
    }
    // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
    // –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞, —á—Ç–æ–±—ã —Ä–∞–º–∫–∞ –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –≤–∏—Å–µ—Ç—å
    if (canvas) {
        canvas.clearRect(0, 0, canvasElement.width, canvasElement.height);
    }
    const startBtn = document.getElementById("start-scan-btn");
    if(startBtn) startBtn.textContent = "–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ";
}
