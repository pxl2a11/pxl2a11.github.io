//56 js/apps/mahjongSolitaire.js

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª—è ---
let board = []; // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∫–æ—Å—Ç–µ–π –Ω–∞ –ø–æ–ª–µ { id, symbol, x, y, z, element }
let selectedTile = null;
let tilesLeft = 0;
let hintTimeout;

// –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const clickSound = new Audio('sounds/games/mahjong/click.mp3');
const matchSound = new Audio('sounds/games/mahjong/double.mp3');
clickSound.onerror = () => console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–≤—É–∫ –∫–ª–∏–∫–∞.");
matchSound.onerror = () => console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–≤—É–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.");


// --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Å—Ç–µ–π –∏ –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ ---
const TILE_DEFINITIONS = [
    // –ú–∞—Å—Ç–∏ (–ø–æ 9 –∫–æ—Å—Ç–µ–π, –∫–∞–∂–¥–∞—è 4 —Ä–∞–∑–∞)
    ...Array.from({ length: 9 }, (_, i) => ({ symbol: ['‰∏Ä','‰∫å','‰∏â','Âõõ','‰∫î','ÂÖ≠','‰∏É','ÂÖ´','‰πù'][i], category: 'character' })),
    ...Array.from({ length: 9 }, (_, i) => ({ symbol: ['üÄê','üÄë','üÄí','üÄì','üÄî','üÄï','üÄñ','üÄó','üÄò'][i], category: 'bamboo' })),
    ...Array.from({ length: 9 }, (_, i) => ({ symbol: ['üÄô','üÄö','üÄõ','üÄú','üÄù','üÄû','üÄü','üÄ†','üÄ°'][i], category: 'circle' })),
    // –í–µ—Ç—Ä—ã –∏ –î—Ä–∞–∫–æ–Ω—ã (–ö–æ–∑—ã—Ä–∏)
    { symbol: 'Êù±', category: 'wind' }, { symbol: 'Âçó', category: 'wind' }, { symbol: 'Ë•ø', category: 'wind' }, { symbol: 'Âåó', category: 'wind' },
    { symbol: '‰∏≠', category: 'dragon-red' }, { symbol: 'Áôº', category: 'dragon-green' }, { symbol: 'ÁôΩ', category: 'dragon-white' },
    // –¶–≤–µ—Ç—ã –∏ –°–µ–∑–æ–Ω—ã (–ø–æ 1 –∫–æ—Å—Ç–∏)
    { symbol: 'Ê¢Ö', category: 'flower', group: 'flower' }, { symbol: 'Ëò≠', category: 'flower', group: 'flower' }, { symbol: 'Ëèä', category: 'flower', group: 'flower' }, { symbol: 'Á´π', category: 'flower', group: 'flower' },
    { symbol: 'Êò•', category: 'season', group: 'season' }, { symbol: 'Â§è', category: 'season', group: 'season' }, { symbol: 'Áßã', category: 'season', group: 'season' }, { symbol: 'ÂÜ¨', category: 'season', group: 'season' }
];

// –†–∞—Å–∫–ª–∞–¥–∫–∞ "–ß–µ—Ä–µ–ø–∞—Ö–∞"
const LAYOUT = [
    // z=0
    [0,3,0],[0,3,1],[0,3,2],[0,3,3],[0,3,4],[0,3,5],[0,3,6],[0,3,7],[0,3,8],[0,3,9],[0,3,10],[0,3,11],
    [0,4,0],[0,4,1],[0,4,2],[0,4,3],[0,4,4],[0,4,5],[0,4,6],[0,4,7],[0,4,8],[0,4,9],[0,4,10],[0,4,11],
    [0,2,1],[0,2,2],[0,2,3],[0,2,4],[0,2,5],[0,2,6],[0,2,7],[0,2,8],[0,2,9],[0,2,10],
    [0,5,1],[0,5,2],[0,5,3],[0,5,4],[0,5,5],[0,5,6],[0,5,7],[0,5,8],[0,5,9],[0,5,10],
    [0,1,2],[0,1,3],[0,1,4],[0,1,5],[0,1,6],[0,1,7],[0,1,8],[0,1,9],
    [0,6,2],[0,6,3],[0,6,4],[0,6,5],[0,6,6],[0,6,7],[0,6,8],[0,6,9],
    [0,0,3],[0,0,4],[0,0,5],[0,0,6],[0,0,7],[0,0,8],
    [0,7,3],[0,7,4],[0,7,5],[0,7,6],[0,7,7],[0,7,8],
    [0,3.5,12],[0,3.5,13], // Special two on the far right
    [0,0.5,0.5], // Special tile on the far left
    // z=1
    [1,3,2],[1,3,3],[1,3,4],[1,3,5],[1,3,6],[1,3,7],[1,3,8],[1,3,9],
    [1,4,2],[1,4,3],[1,4,4],[1,4,5],[1,4,6],[1,4,7],[1,4,8],[1,4,9],
    [1,2,3],[1,2,4],[1,2,5],[1,2,6],[1,2,7],[1,2,8],
    [1,5,3],[1,5,4],[1,5,5],[1,5,6],[1,5,7],[1,5,8],
    // z=2
    [2,3,4],[2,3,5],[2,3,6],[2,3,7],
    [2,4,4],[2,4,5],[2,4,6],[2,4,7],
    // z=3
    [3,3.5,5.5] // Top tile
].map((pos, index) => ({ id: index, z: pos[0], y: pos[1], x: pos[2] }));


// --- HTML –∏ CSS ---
export function getHtml() {
    return `
        <style>
            .mahjong-board-container {
                position: relative;
                width: 100%;
                padding: 10px;
                background-color: #056642;
                background-image: radial-gradient(rgba(255, 255, 255, 0.05) 10%, transparent 10%);
                background-size: 15px 15px;
                border-radius: 12px;
                box-shadow: inset 0 0 15px rgba(0,0,0,0.5);
                display: flex;
                justify-content: center;
                align-items: center;
            }
            .dark .mahjong-board-container { background-color: #064e3b; }
            #mahjong-board {
                position: relative;
                width: 100%;
                max-width: 800px;
                aspect-ratio: 1.5 / 1;
                user-select: none;
            }
            
            /* =============================================================== */
            /* ============ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Ñ–∏—à–µ–∫ ================ */
            /* =============================================================== */

            .mahjong-tile {
                position: absolute;
                width: calc(100% / 15);
                height: calc(100% / 10);
                box-sizing: border-box;
                display: flex;
                justify-content: center;
                align-items: center;
                font-size: clamp(12px, 4vmin, 24px);
                font-family: 'Noto Sans', sans-serif;
                cursor: pointer;
                border-radius: 4px;
                background: linear-gradient(145deg, #FEFBF0, #F8F2E0);
                border: 1px solid #C8C0B0;

                /* –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è */
                transition: transform 0.2s ease-out, box-shadow 0.2s ease-out, filter 0.2s ease-out;

                /* –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ç–µ–Ω—å –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –æ—Å—Ç–∞–µ—Ç—Å—è, –æ–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–∏ */
                 box-shadow: inset 0 0 5px 2px rgba(185, 105, 40, 0.35);
            }
            
            /* --- –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê --- */
            /* –í—ã–≥–ª—è–¥–∏—Ç "–≤–¥–∞–≤–ª–µ–Ω–Ω–æ–π", —Ç—É—Å–∫–ª–∞—è, —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–Ω—å—é */
            .mahjong-tile.blocked {
                filter: brightness(0.85) saturate(0.6);
                cursor: default;
                /* –ú–∞–ª–µ–Ω—å–∫–∞—è, —á–µ—Ç–∫–∞—è —Ç–µ–Ω—å, –±—É–¥—Ç–æ —Ñ–∏—à–∫–∞ –ª–µ–∂–∏—Ç –Ω–∞ –ø–æ–ª–µ */
                box-shadow: inset 0 0 5px 2px rgba(185, 105, 40, 0.2), 
                            2px 2px 4px rgba(0,0,0,0.3);
            }
            
            /* --- –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ê–ö–¢–ò–í–ù–ê (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å) --- */
            /* –í—ã–≥–ª—è–¥–∏—Ç "–ø–∞—Ä—è—â–µ–π" –Ω–∞–¥ –ø–æ–ª–µ–º, –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞–∂–∞—Ç–∏—é */
            .mahjong-tile.selectable {
                /* –°–ª–µ–≥–∫–∞ –ø—Ä–∏–ø–æ–¥–Ω–∏–º–∞–µ–º —Ñ–∏—à–∫—É */
                transform: translateY(-2px);
                /* –¢–µ–Ω—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –∏ –º—è–≥—á–µ, —Å–æ–∑–¥–∞–≤–∞—è –æ—â—É—â–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã */
                box-shadow: inset 0 0 5px 2px rgba(185, 105, 40, 0.35), 
                            5px 5px 12px rgba(0, 0, 0, 0.3);
            }

            /* --- –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ù–ê–í–ï–î–ï–ù–ò–ï –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é —Ñ–∏—à–∫—É --- */
            /* –ü—Ä–∏–ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –µ—â–µ –≤—ã—à–µ, —Ç–µ–Ω—å —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è */
            .mahjong-tile.selectable:hover {
                background: linear-gradient(145deg, #fff, #fef4e5);
                border-color: #a8a29e;
                transform: translateY(-5px) scale(1.03);
                box-shadow: inset 0 0 5px 2px rgba(185, 105, 40, 0.35), 
                            8px 8px 18px rgba(0, 0, 0, 0.35);
            }

            /* --- –°–æ—Å—Ç–æ—è–Ω–∏–µ: –í–´–ë–†–ê–ù–ê --- */
            /* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è, —è—Ä–∫–∞—è —Ä–∞–º–∫–∞ –∏ –±–æ–ª—å—à–∞—è —Ç–µ–Ω—å */
            .mahjong-tile.selected {
                background: linear-gradient(145deg, #dcfce7, #bbf7d0);
                border-color: #4ade80;
                transform: scale(1.08) translateY(-4px);
                box-shadow: inset 0 0 4px 1px rgba(74, 222, 128, 0.5),
                            12px 16px 25px rgba(0,0,0,0.4);
                filter: none; /* –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ */
            }

            /* --- –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ü–û–î–°–ö–ê–ó–ö–ê --- */
            .mahjong-tile.hint { animation: hint-pulse 0.8s infinite alternate; }
            @keyframes hint-pulse {
                to { 
                    background: linear-gradient(145deg, #fef3c7, #fde68a);
                    border-color: #f59e0b;
                    transform: translateY(-4px) scale(1.02); /* –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º transform */
                    box-shadow: inset 0 0 5px 2px rgba(245, 158, 11, 0.4),
                                9px 9px 16px rgba(0,0,0,0.3); /* –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ç–µ–Ω—å */
                }
            }

            /* =============================================================== */
            /* ================= –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–∏–∑–∞–π–Ω–µ =================== */
            /* =============================================================== */

            .mahjong-overlay {
                position: absolute; inset: 0; background: rgba(0,0,0,0.7); display: none;
                justify-content: center; align-items: center; text-align: center;
                border-radius: 0.5rem; z-index: 200;
            }

            /* --- –¶–≤–µ—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã --- */
            .mahjong-tile .symbol { font-weight: bold; }
            .mahjong-tile.character .symbol { color: #1e3a8a; }
            .mahjong-tile.bamboo .symbol { color: #065f46; }
            .mahjong-tile.circle .symbol { color: #991b1b; }
            .mahjong-tile.wind .symbol { color: #1e293b; }
            .mahjong-tile.dragon-red .symbol { color: #dc2626; }
            .mahjong-tile.dragon-green .symbol { color: #16a34a; }
            .mahjong-tile.dragon-white .symbol { 
                width: 50%; 
                height: 70%; 
                border: 2px solid #60a5fa; 
                border-radius: 4px;
                box-shadow: inset 0 0 0 2px #1e40af;
                background-color: rgba(239, 246, 255, 0.7);
            }
            .mahjong-tile.flower .symbol { color: #db2777; }
            .mahjong-tile.season .symbol { color: #ca8a04; }
        </style>

        <div class="flex flex-col items-center gap-4 py-4 sm:py-8">
            <div class="flex justify-between items-center w-full max-w-2xl p-2 bg-gray-100 dark:bg-gray-800 rounded-lg shadow-md">
                <div class="font-semibold">–û—Å—Ç–∞–ª–æ—Å—å –∫–æ—Å—Ç–µ–π: <span id="mahjong-tiles-left">0</span></div>
                <div class="flex gap-2">
                    <button id="mahjong-shuffle-btn" class="px-3 py-1 text-sm bg-yellow-500 text-white rounded hover:bg-yellow-600" disabled>–ü–µ—Ä–µ–º–µ—à–∞—Ç—å</button>
                    <button id="mahjong-hint-btn" class="px-3 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600">–ü–æ–¥—Å–∫–∞–∑–∫–∞</button>
                    <button id="mahjong-new-game-btn" class="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600">–ù–æ–≤–∞—è –∏–≥—Ä–∞</button>
                </div>
            </div>

            <div class="mahjong-board-container">
                <div id="mahjong-board"></div>
                <div id="mahjong-overlay" class="mahjong-overlay">
                    <div class="p-8 bg-white dark:bg-gray-800 rounded-xl shadow-2xl">
                        <h2 id="mahjong-overlay-title" class="text-3xl font-bold text-green-500">–ü–æ–±–µ–¥–∞!</h2>
                        <p id="mahjong-overlay-text" class="mt-2"></p>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// --- –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã ---

function generateSolvableBoard() {
    // 1. –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É –ø–∞—Ä
    const pairs = [];
    TILE_DEFINITIONS.forEach(def => {
        if (def.group) { // –¶–≤–µ—Ç—ã –∏ —Å–µ–∑–æ–Ω—ã
            // –û–Ω–∏ –Ω–µ –æ–±—Ä–∞–∑—É—é—Ç —Å—Ç—Ä–æ–≥–∏–µ –ø–∞—Ä—ã, –∏—Ö –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
        } else {
            // –û–±—ã—á–Ω—ã–µ –∫–æ—Å—Ç–∏ –æ–±—Ä–∞–∑—É—é—Ç 2 –ø–∞—Ä—ã (–≤—Å–µ–≥–æ 4 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö)
            const tileData = { ...def };
            delete tileData.group;
            pairs.push([ { ...tileData, id: `${def.symbol}_0` }, { ...tileData, id: `${def.symbol}_1` } ]);
            pairs.push([ { ...tileData, id: `${def.symbol}_2` }, { ...tileData, id: `${def.symbol}_3` } ]);
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç—ã –∏ —Å–µ–∑–æ–Ω—ã –∫–∞–∫ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ—á–µ—Ç–∞—Ç—å—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
    const flowers = TILE_DEFINITIONS.filter(t => t.group === 'flower').map((t, i) => ({ ...t, id: `flower_${i}`}));
    const seasons = TILE_DEFINITIONS.filter(t => t.group === 'season').map((t, i) => ({ ...t, id: `season_${i}`}));
    
    // –°–æ–∑–¥–∞–µ–º –∏–∑ –Ω–∏—Ö —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä—ã
    pairs.push([flowers[0], flowers[1]], [flowers[2], flowers[3]]);
    pairs.push([seasons[0], seasons[1]], [seasons[2], seasons[3]]);

    // 2. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–∞—Ä—ã
    for (let i = pairs.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [pairs[i], pairs[j]] = [pairs[j], pairs[i]];
    }

    let remainingPositions = [...LAYOUT];
    const finalBoard = [];

    // 3. "–†–∞–∑–±–∏—Ä–∞–µ–º" –ø–æ–ª–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    while (remainingPositions.length > 0) {
        if (pairs.length === 0) {
            console.error("–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–∞—Ä—ã –∫–æ—Å—Ç–µ–π, –∞ –º–µ—Å—Ç–∞ –µ—â–µ –µ—Å—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–∫–ª–∞–¥–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Å—Ç–µ–π.");
            return null; // –û—à–∏–±–∫–∞
        }

        // a. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ "—Å–≤–æ–±–æ–¥–Ω—ã–µ" –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ
        const openPositions = remainingPositions.filter(p1 => {
            const isCovered = remainingPositions.some(p2 =>
                p1.id !== p2.id && p2.z > p1.z && Math.abs(p2.x - p1.x) < 1 && Math.abs(p2.y - p1.y) < 1
            );
            if (isCovered) return false;

            const isBlockedOnLeft = remainingPositions.some(p2 =>
                p1.id !== p2.id && p2.z === p1.z && p2.x === p1.x - 1 && Math.abs(p2.y - p1.y) < 1
            );
            const isBlockedOnRight = remainingPositions.some(p2 =>
                p1.id !== p2.id && p2.z === p1.z && p2.x === p1.x + 1 && Math.abs(p2.y - p1.y) < 1
            );
            return !(isBlockedOnLeft && isBlockedOnRight);
        });

        // b. –ï—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã –Ω–µ –Ω–∞—à–ª–æ—Å—å, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–π
        if (openPositions.length < 2) {
            console.warn("–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å: –Ω–µ –Ω–∞—à–ª–æ—Å—å –¥–≤—É—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–∞—Ä—ã. –ü–æ–≤—Ç–æ—Ä...");
            return null; // –°–∏–≥–Ω–∞–ª –¥–ª—è startGame, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        }

        // c. –ë–µ—Ä–µ–º –ø–∞—Ä—É –∫–æ—Å—Ç–µ–π –∏–∑ –∫–æ–ª–æ–¥—ã
        const [tile1Data, tile2Data] = pairs.pop();

        // d. –í—ã–±–∏—Ä–∞–µ–º –¥–≤–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        const pos1Index = Math.floor(Math.random() * openPositions.length);
        const [pos1] = openPositions.splice(pos1Index, 1);
        
        const pos2Index = Math.floor(Math.random() * openPositions.length);
        const [pos2] = openPositions.splice(pos2Index, 1);

        // e. –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–æ—Å—Ç–∏ —ç—Ç–∏–º –ø–æ–∑–∏—Ü–∏—è–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
        finalBoard.push({ ...tile1Data, z: pos1.z, y: pos1.y, x: pos1.x, isRemoved: false });
        finalBoard.push({ ...tile2Data, z: pos2.z, y: pos2.y, x: pos2.x, isRemoved: false });

        // f. –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        remainingPositions = remainingPositions.filter(p => p.id !== pos1.id && p.id !== pos2.id);
    }

    return finalBoard;
}


function startGame() {
    clearAllHints();
    
    let newBoard = null;
    let attempts = 0;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–µ–∫–∞ –ø—Ä–∏ —Ä–µ–∫—É—Ä—Å–∏–∏
    do {
        newBoard = generateSolvableBoard();
        attempts++;
    } while (!newBoard && attempts < 100); // –ü–æ–≤—Ç–æ—Ä—è–µ–º, –ø–æ–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª–µ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞)

    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ 100 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª–µ —Ç–∞–∫ –∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if (!newBoard) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–∞–µ–º–æ–µ –ø–æ–ª–µ –ø–æ—Å–ª–µ 100 –ø–æ–ø—ã—Ç–æ–∫.");
        showOverlay("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
        return;
    }

    board = newBoard;
    selectedTile = null;
    document.getElementById('mahjong-overlay').style.display = 'none';
    tilesLeft = board.length;
    renderBoard();
}

function renderBoard() {
    const boardEl = document.getElementById('mahjong-board');
    const tilesLeftEl = document.getElementById('mahjong-tiles-left');
    boardEl.innerHTML = '';
    
    const sortedBoard = [...board].sort((a,b) => a.z - b.z || a.y - b.y || a.x - a.x);

    sortedBoard.forEach(tile => {
        if (tile.isRemoved) return;
        
        const tileEl = createCardElement(tile);
        
        // –°–º–µ—â–∞–µ–º –∫–∞–∂–¥—É—é —Ñ–∏—à–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 3D-—ç—Ñ—Ñ–µ–∫—Ç–∞
        const xOffset = -tile.z * 6;
        const yOffset = -tile.z * 6;

        tileEl.style.top = `calc(${tile.y * (100 / 8)}% + ${yOffset}px)`;
        tileEl.style.left = `calc(${tile.x * (100 / 15)}% + ${xOffset}px)`;
        tileEl.style.zIndex = tile.z * 10 + Math.floor(tile.y);

        boardEl.appendChild(tileEl);
        tile.element = tileEl; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ DOM-—ç–ª–µ–º–µ–Ω—Ç
    });
    
    tilesLeftEl.textContent = tilesLeft;
    updateSelectableTiles();
}

function createCardElement(card) {
    const el = document.createElement('div');
    el.className = `mahjong-tile ${card.category || ''}`;
    el.dataset.id = card.id;
    el.innerHTML = card.category === 'dragon-white' ? `<span class="symbol"></span>` : `<span class="symbol">${card.symbol}</span>`;
    return el;
}

function isTileBlocked(tile, currentBoard = board) {
    const TILE_WIDTH = 1;
    const TILE_HEIGHT = 1;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∫–æ—Å—Ç—å –ù–ê–î —Ç–µ–∫—É—â–µ–π
    const isCovered = currentBoard.some(other => 
        !other.isRemoved && 
        other.z > tile.z && 
        Math.abs(other.x - tile.x) < TILE_WIDTH && 
        Math.abs(other.y - tile.y) < TILE_HEIGHT
    );
    if (isCovered) return true;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –∫–æ—Å—Ç—å —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω (—Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞)
    const isBlockedOnLeft = currentBoard.some(other =>
        !other.isRemoved &&
        other.z === tile.z &&
        other.x === tile.x - TILE_WIDTH &&
        Math.abs(other.y - tile.y) < TILE_HEIGHT
    );
    
    const isBlockedOnRight = currentBoard.some(other =>
        !other.isRemoved &&
        other.z === tile.z &&
        other.x === tile.x + TILE_WIDTH &&
        Math.abs(other.y - tile.y) < TILE_HEIGHT
    );

    return isBlockedOnLeft && isBlockedOnRight;
}

function updateSelectableTiles() {
    board.forEach(tile => {
        if (tile.isRemoved || !tile.element) return;
        
        if (!isTileBlocked(tile)) {
            tile.element.classList.add('selectable');
            tile.element.classList.remove('blocked');
        } else {
            tile.element.classList.remove('selectable');
            tile.element.classList.add('blocked');
        }
    });
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –¥–∞—Ç—å DOM –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    setTimeout(checkForAvailableMoves, 50);
}

function hasAvailableMoves(currentBoard) {
    const selectableTiles = currentBoard.filter(t => !t.isRemoved && !isTileBlocked(t, currentBoard));
    if (selectableTiles.length < 2) return false;

    const counts = new Map();
    for (const tile of selectableTiles) {
        const key = tile.group || tile.symbol; // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ "flower"/"season" –∏–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª—É
        const currentCount = counts.get(key) || 0;
        counts.set(key, currentCount + 1);
    }
    
    for (const count of counts.values()) {
        if (count >= 2) {
            return true; // –ù–∞—à–ª–∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –≤–æ–∑–º–æ–∂–Ω—É—é –ø–∞—Ä—É
        }
    }
    
    return false;
}


function checkForAvailableMoves() {
    const shuffleBtn = document.getElementById('mahjong-shuffle-btn');
    const hasMoves = hasAvailableMoves(board);

    if (!hasMoves && tilesLeft > 0) {
        shuffleBtn.disabled = false;
        showOverlay("–ù–µ—Ç —Ö–æ–¥–æ–≤!", "–ù–∞–∂–º–∏—Ç–µ '–ü–µ—Ä–µ–º–µ—à–∞—Ç—å' –∏–ª–∏ '–ù–æ–≤–∞—è –∏–≥—Ä–∞'.");
    } else {
        shuffleBtn.disabled = true;
    }
    document.getElementById('mahjong-hint-btn').disabled = !hasMoves;
}

function handleTileClick(tileEl) {
    if (!tileEl.classList.contains('selectable')) return;
    
    clickSound.play().catch(e => console.warn("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:", e));
    
    const clickedTileData = board.find(t => t.id === tileEl.dataset.id);

    if (selectedTile) {
        if (selectedTile.id === clickedTileData.id) {
            selectedTile.element.classList.remove('selected');
            selectedTile = null;
            return;
        }

        const isMatch = (selectedTile.symbol === clickedTileData.symbol) || 
                        (selectedTile.group && selectedTile.group === clickedTileData.group);

        if (isMatch) {
            matchSound.play().catch(e => console.warn("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:", e));

            selectedTile.isRemoved = true;
            clickedTileData.isRemoved = true;
            
            clearAllHints();

            selectedTile.element?.remove();
            clickedTileData.element?.remove();
            
            tilesLeft -= 2;
            document.getElementById('mahjong-tiles-left').textContent = tilesLeft;

            selectedTile = null;
            
            updateSelectableTiles();
            
            if (tilesLeft === 0) {
                showOverlay("–ü–æ–±–µ–¥–∞!", "–í—ã –æ—á–∏—Å—Ç–∏–ª–∏ –≤—Å—ë –ø–æ–ª–µ!");
            }
        } else {
            selectedTile.element?.classList.remove('selected');
            selectedTile = clickedTileData;
            selectedTile.element.classList.add('selected');
        }

    } else {
        selectedTile = clickedTileData;
        selectedTile.element.classList.add('selected');
    }
}

function showOverlay(title, text) {
    document.getElementById('mahjong-overlay-title').textContent = title;
    document.getElementById('mahjong-overlay-text').textContent = text;
    document.getElementById('mahjong-overlay').style.display = 'flex';
}

function clearAllHints() {
    clearTimeout(hintTimeout);
    document.querySelectorAll('.hint').forEach(el => el.classList.remove('hint'));
}

function findHint() {
    clearAllHints();

    const selectableTiles = board.filter(t => !t.isRemoved && !isTileBlocked(t));
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á—É
    const groups = {};
    for (const tile of selectableTiles) {
        const key = tile.group || tile.symbol;
        if (!groups[key]) groups[key] = [];
        groups[key].push(tile);
    }

    // –ò—â–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å –ø–∞—Ä–∞
    for (const key in groups) {
        if (groups[key].length >= 2) {
            const tile1 = groups[key][0];
            const tile2 = groups[key][1];
            
            tile1.element?.classList.add('hint');
            tile2.element?.classList.add('hint');
            hintTimeout = setTimeout(clearAllHints, 2000);
            return;
        }
    }
}

function shuffleBoard() {
    clearAllHints();
    
    const remainingTiles = board.filter(t => !t.isRemoved);
    const tilesDataToShuffle = remainingTiles.map(t => ({ 
        symbol: t.symbol, id: t.id, group: t.group, category: t.category 
    }));

    for (let i = tilesDataToShuffle.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [tilesDataToShuffle[i], tilesDataToShuffle[j]] = [tilesDataToShuffle[j], tilesDataToShuffle[i]];
    }

    remainingTiles.forEach((tile, index) => {
        const newTileData = tilesDataToShuffle[index];
        tile.symbol = newTileData.symbol;
        tile.id = newTileData.id;
        tile.group = newTileData.group;
        tile.category = newTileData.category;
        
        if (tile.element) {
            tile.element.className = `mahjong-tile ${tile.category || ''}`;
            tile.element.dataset.id = tile.id;
            tile.element.innerHTML = tile.category === 'dragon-white' 
                ? `<span class="symbol"></span>` 
                : `<span class="symbol">${tile.symbol}</span>`;
        }
    });
    
    document.getElementById('mahjong-overlay').style.display = 'none';
    if(selectedTile) {
        selectedTile.element?.classList.remove('selected');
        selectedTile = null;
    }
    
    updateSelectableTiles();
}


export function init() {
    const boardEl = document.getElementById('mahjong-board');
    const newGameBtn = document.getElementById('mahjong-new-game-btn');
    const hintBtn = document.getElementById('mahjong-hint-btn');
    const shuffleBtn = document.getElementById('mahjong-shuffle-btn');

    boardEl.addEventListener('click', (e) => {
        const tileEl = e.target.closest('.mahjong-tile');
        if (tileEl) handleTileClick(tileEl);
    });

    newGameBtn.addEventListener('click', startGame);
    hintBtn.addEventListener('click', findHint);
    shuffleBtn.addEventListener('click', shuffleBoard);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∫–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏
    if (TILE_DEFINITIONS.reduce((acc, def) => acc + (def.group ? 1 : 4), 0) < LAYOUT.length) {
         console.error(`–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –í —Ä–∞—Å–∫–ª–∞–¥–∫–µ (${LAYOUT.length}) –±–æ–ª—å—à–µ –º–µ—Å—Ç, —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ –∫–æ—Å—Ç–µ–π.`);
         showOverlay("–û—à–∏–±–∫–∞", "–í —Ä–∞—Å–∫–ª–∞–¥–∫–µ –±–æ–ª—å—à–µ –º–µ—Å—Ç, —á–µ–º –∫–æ—Å—Ç–µ–π. –ò–≥—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞.");
         return;
    }
    
    startGame();
}

export function cleanup() {
    clearAllHints();
    board = [];
    selectedTile = null;
}
