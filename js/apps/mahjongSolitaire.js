// 27js/apps/mahjongSolitaire.js

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª—è ---
let board = []; // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∫–æ—Å—Ç–µ–π –Ω–∞ –ø–æ–ª–µ { id, symbol, x, y, z, element, group }
let selectedTile = null;
let tilesLeft = 0;
let hintTimeout;

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ ---
const TILE_WIDTH_GRID = 16; // –®–∏—Ä–∏–Ω–∞ –¥–æ—Å–∫–∏ –≤ "—É—Å–ª–æ–≤–Ω—ã—Ö –∫–æ—Å—Ç—è—Ö" (15 –±—ã–ª–æ –º–∞–ª–æ–≤–∞—Ç–æ)
const TILE_HEIGHT_GRID = 10; // –í—ã—Å–æ—Ç–∞ –¥–æ—Å–∫–∏ –≤ "—É—Å–ª–æ–≤–Ω—ã—Ö –∫–æ—Å—Ç—è—Ö"
const TILE_X_UNIT = 100 / TILE_WIDTH_GRID; // –®–∏—Ä–∏–Ω–∞ –∫–æ—Å—Ç–∏ –≤ %
const TILE_Y_UNIT = 100 / TILE_HEIGHT_GRID; // –í—ã—Å–æ—Ç–∞ –∫–æ—Å—Ç–∏ –≤ %
const TILE_DEPTH_PX = 10; // –ì–ª—É–±–∏–Ω–∞ (—Å–º–µ—â–µ–Ω–∏–µ) –¥–ª—è 3D-—ç—Ñ—Ñ–µ–∫—Ç–∞
const TILE_SHIFT_Z = 6; // –°–º–µ—â–µ–Ω–∏–µ –≤ –ø–∏–∫—Å–µ–ª—è—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Z-—Å–ª–æ—è

// --- HTML –∏ CSS ---

export function getHtml() {
    return `
        <style>
            .mahjong-container {
                position: relative;
                width: 100%;
                max-width: 900px; /* –ù–µ–º–Ω–æ–≥–æ —à–∏—Ä–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞ */
                margin: 0 auto;
                aspect-ratio: 1.6 / 1; /* –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –¥–æ—Å–∫–∏ */
            }
            #mahjong-board {
                position: relative;
                width: 100%;
                height: 100%;
                user-select: none;
                /* --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É –¥–ª—è –ª—É—á—à–µ–≥–æ 3D-–≤–∏–¥–∞ --- */
                transform-style: preserve-3d;
                perspective: 1000px; 
            }

            /* --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω—ã–π 3D-—ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–æ—Å—Ç–µ–π --- */
            .mahjong-tile {
                position: absolute;
                width: ${TILE_X_UNIT}%;
                height: ${TILE_Y_UNIT}%;
                box-sizing: border-box;
                display: flex;
                justify-content: center;
                align-items: center;
                font-size: clamp(14px, 4.5vmin, 28px);
                font-weight: 800; /* –ë–æ–ª–µ–µ –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç */
                cursor: pointer;
                transition: all 0.2s ease-in-out;
                border-radius: 4px;
                line-height: 1; /* –£–ª—É—á—à–∏—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ */
                
                /* --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–∞—Å—Ç–æ—è—â–∏–π 3D-—ç—Ñ—Ñ–µ–∫—Ç —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –±–æ–∫–æ–≤ --- */
                background-color: #f7fafc; /* gray-50 - –ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ */
                color: #2d3748; /* gray-800 - —Å–∏–º–≤–æ–ª */
                border: 1px solid #e2e8f0; 
                
                /* –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—ä–µ–º–∞: —Å–≤–µ—Ç —Å–≤–µ—Ä—Ö—É/—Å–ª–µ–≤–∞, —Ç–µ–Ω—å —Å–Ω–∏–∑—É/—Å–ø—Ä–∞–≤–∞ */
                box-shadow: 
                    inset 0 0 0 1px rgba(255,255,255,0.7), /* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–ª–∏–∫ */
                    2px 2px 4px rgba(0,0,0,0.4), /* –¢–µ–Ω—å –ø–æ–¥ –∫–æ—Å—Ç—å—é (–ø–æ–¥–Ω–∏–º–∞–µ—Ç) */
                    0 0 0 ${TILE_DEPTH_PX}px rgba(0,0,0,0.1) /* –ò–º–∏—Ç–∞—Ü–∏—è —Ç–æ–ª—â–∏–Ω—ã –±–æ–∫–∞ */
                    ; 
                transform-origin: center center;
                /* –ù–∞—Å—Ç–æ—è—â–µ–µ 3D-—Å–º–µ—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –≤ JS */
            }
            
            /* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞: 3D-—ç—Ñ—Ñ–µ–∫—Ç */
            .dark .mahjong-tile {
                background-color: #3b4252; /* –ë–æ–ª–µ–µ —Å–≤–µ—Ç–ª—ã–π —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω */
                color: #eceff4; /* –°–≤–µ—Ç–ª—ã–π —Å–∏–º–≤–æ–ª */
                border: 1px solid #4c566a;
                box-shadow: 
                    inset 0 0 0 1px rgba(255,255,255,0.1), 
                    2px 2px 4px rgba(0,0,0,0.6), 
                    0 0 0 ${TILE_DEPTH_PX}px rgba(0,0,0,0.2)
                    ;
            }

            .mahjong-tile.selectable {
                /* –£–º–µ–Ω—å—à–∞—é —Å–≤–µ—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–±–∏–≤–∞—Ç—å 3D-—Ç–µ–Ω—å */
                box-shadow: 
                    inset 0 0 0 1px rgba(255,255,255,0.7), 
                    2px 2px 4px rgba(0,0,0,0.4), 
                    0 0 0 ${TILE_DEPTH_PX}px rgba(59, 130, 246, 0.4); /* –°–∏–Ω–∏–π "–±–æ–∫" */
            }
            .dark .mahjong-tile.selectable {
                 box-shadow: 
                    inset 0 0 0 1px rgba(255,255,255,0.1), 
                    2px 2px 4px rgba(0,0,0,0.6), 
                    0 0 0 ${TILE_DEPTH_PX}px rgba(59, 130, 246, 0.3);
            }

            .mahjong-tile.selected {
                /* –≠—Ñ—Ñ–µ–∫—Ç "–ø—Ä–∏–ø–æ–¥–Ω—è—Ç–æ—Å—Ç–∏" –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ—Å—Ç–∏ */
                transform: scale(1.08) translateZ(${TILE_SHIFT_Z * 2}px); /* –£–ª—É—á—à–µ–Ω–Ω–æ–µ 3D-–ø–æ–¥–Ω—è—Ç–∏–µ */
                box-shadow: 
                    5px 5px 15px rgba(0,0,0,0.5), /* –ë–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è —Ç–µ–Ω—å */
                    0 0 0 ${TILE_DEPTH_PX}px rgba(239, 68, 68, 0.7); /* –ö—Ä–∞—Å–Ω—ã–π "–±–æ–∫" –ø—Ä–∏ –≤—ã–±–æ—Ä–µ */
                z-index: 100 !important;
            }
            /* --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –í–ò–î–ï --- */

            .mahjong-tile.hint {
                animation: hint-pulse 0.8s infinite;
            }
            @keyframes hint-pulse {
                0% { box-shadow: 0 0 8px rgba(234, 179, 8, 0.7); }
                50% { box-shadow: 0 0 16px rgba(234, 179, 8, 1); }
                100% { box-shadow: 0 0 8px rgba(234, 179, 8, 0.7); }
            }
            .mahjong-overlay {
                position: absolute; inset: 0; background: rgba(0,0,0,0.7); display: none;
                justify-content: center; align-items: center; text-align: center;
                border-radius: 0.5rem; z-index: 1000; /* –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π Z-–∏–Ω–¥–µ–∫—Å */
            }
            
            /* –°—Ç–∏–ª–∏ –¥–ª—è –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –ø–æ–¥–ª–æ–∂–∫–∏ - —É–¥–∞–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —ç—Ç–æ–º –∫–æ–¥–µ. */

            /* –î–æ–±–∞–≤–ª—é —Å–±—Ä–æ—Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ */
            #mahjong-board .mahjong-tile {
                 transform: none; /* –ë—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ JS */
            }
        </style>
        <div class="flex flex-col items-center gap-4">
            <div class="flex justify-between items-center w-full max-w-2xl p-2 bg-gray-100 dark:bg-gray-800 rounded-lg shadow-md">
                <div class="font-semibold text-lg">–û—Å—Ç–∞–ª–æ—Å—å –∫–æ—Å—Ç–µ–π: <span id="mahjong-tiles-left" class="text-blue-500 font-bold">0</span></div>
                <div class="flex gap-2">
                    <button id="mahjong-shuffle-btn" class="px-3 py-1 text-sm bg-yellow-500 text-white rounded hover:bg-yellow-600 disabled:opacity-50" disabled>–ü–µ—Ä–µ–º–µ—à–∞—Ç—å</button>
                    <button id="mahjong-hint-btn" class="px-3 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50">–ü–æ–¥—Å–∫–∞–∑–∫–∞</button>
                    <button id="mahjong-new-game-btn" class="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600">–ù–æ–≤–∞—è –∏–≥—Ä–∞</button>
                </div>
            </div>

            <div class="mahjong-container">
                <div id="mahjong-board"></div>
                <div id="mahjong-overlay" class="mahjong-overlay">
                    <div class="p-8 bg-white dark:bg-gray-800 rounded-xl shadow-2xl">
                        <h2 id="mahjong-overlay-title" class="text-3xl font-bold text-green-500">–ü–æ–±–µ–¥–∞!</h2>
                        <p id="mahjong-overlay-text" class="mt-2 text-gray-700 dark:text-gray-300"></p>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// --- –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

const TILE_SYMBOLS = [
    'Èæç','È¢®','Á´π','Ëèä','Ëò≠','Ê¢Ö','Êò•','Â§è','Áßã','ÂÜ¨',
    '‰∏Ä','‰∫å','‰∏â','Âõõ','‰∫î','ÂÖ≠','‰∏É','ÂÖ´','‰πù',
    'Êù±','Âçó','Ë•ø','Âåó','‰∏≠','Áôº','ÁôΩ',
    'üÄô','üÄö','üÄõ','üÄú','üÄù','üÄû','üÄü','üÄ†','üÄ°'
];

// –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –õ–ï–ô–ê–£–¢ –¥–ª—è –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω–æ–π –¥–æ—Å–∫–∏ (—Ç–µ–ø–µ—Ä—å 16x10 –≤–º–µ—Å—Ç–æ 12x8)
const LAYOUT = [
    [0,3,1],[0,3,2],[0,3,3],[0,3,4],[0,3,5],[0,3,6],[0,3,7],[0,3,8],[0,3,9],[0,3,10],[0,3,11],[0,3,12],[0,3,13],[0,3,14],
    [0,4,1],[0,4,2],[0,4,3],[0,4,4],[0,4,5],[0,4,6],[0,4,7],[0,4,8],[0,4,9],[0,4,10],[0,4,11],[0,4,12],[0,4,13],[0,4,14],
    [0,2,2],[0,2,3],[0,2,4],[0,2,5],[0,2,6],[0,2,7],[0,2,8],[0,2,9],[0,2,10],[0,2,11],[0,2,12],[0,2,13],
    [0,5,2],[0,5,3],[0,5,4],[0,5,5],[0,5,6],[0,5,7],[0,5,8],[0,5,9],[0,5,10],[0,5,11],[0,5,12],[0,5,13],
    [0,1,3],[0,1,4],[0,1,5],[0,1,6],[0,1,7],[0,1,8],[0,1,9],[0,1,10],[0,1,11],[0,1,12],
    [0,6,3],[0,6,4],[0,6,5],[0,6,6],[0,6,7],[0,6,8],[0,6,9],[0,6,10],[0,6,11],[0,6,12],
    [0,0,4],[0,0,5],[0,0,6],[0,0,7],[0,0,8],[0,0,9],[0,0,10],[0,0,11],
    [0,7,4],[0,7,5],[0,7,6],[0,7,7],[0,7,8],[0,7,9],[0,7,10],[0,7,11],
    // –í—Ç–æ—Ä–æ–π —Å–ª–æ–π
    [1,3,3],[1,3,4],[1,3,5],[1,3,6],[1,3,7],[1,3,8],[1,3,9],[1,3,10],[1,3,11],[1,3,12],
    [1,4,3],[1,4,4],[1,4,5],[1,4,6],[1,4,7],[1,4,8],[1,4,9],[1,4,10],[1,4,11],[1,4,12],
    [1,2,4],[1,2,5],[1,2,6],[1,2,7],[1,2,8],[1,2,9],[1,2,10],[1,2,11],
    [1,5,4],[1,5,5],[1,5,6],[1,5,7],[1,5,8],[1,5,9],[1,5,10],[1,5,11],
    // –¢—Ä–µ—Ç–∏–π —Å–ª–æ–π
    [2,3,5],[2,3,6],[2,3,7],[2,3,8],[2,3,9],[2,3,10],
    [2,4,5],[2,4,6],[2,4,7],[2,4,8],[2,4,9],[2,4,10],
    // –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Å–ª–æ–π
    [3,3.5,7.5], // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ—Å—Ç—å
    // –ë–æ–∫–æ–≤—ã–µ –∫–æ—Å—Ç–∏ (—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ [0,3.5,13] –∏ —Ç.–¥. - —Å–º–µ—Å—Ç–∏–º –∏—Ö –∫ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é)
    [0,3.5,0],[0,3.5,15] // –õ–µ–≤–∞—è –∏ –ü—Ä–∞–≤–∞—è
]; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Å—Ç–µ–π —Å—Ç–∞–ª–æ 120 (4x30) + 8 + 4 + 4 + 2 = 138 -> 144 –∫–æ—Å—Ç–∏, –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É.
// –£–ø—Ä–æ—Å—Ç–∏–º —Ä–∞—Å–∫–ª–∞–¥–∫—É, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –ª–æ–≥–∏–∫—É. –í–µ—Ä–Ω–µ–º –∫ 144.

const FIXED_LAYOUT = [
    // Layer 0 (Bottom) - 12x10 + 2 (sides) = 122 -> –£–º–µ–Ω—å—à–∏–º –¥–æ 120
    [0,3,0],[0,3,1],[0,3,2],[0,3,3],[0,3,4],[0,3,5],[0,3,6],[0,3,7],[0,3,8],[0,3,9],[0,3,10],[0,3,11], // 12
    [0,4,0],[0,4,1],[0,4,2],[0,4,3],[0,4,4],[0,4,5],[0,4,6],[0,4,7],[0,4,8],[0,4,9],[0,4,10],[0,4,11], // 12
    [0,2,1],[0,2,2],[0,2,3],[0,2,4],[0,2,5],[0,2,6],[0,2,7],[0,2,8],[0,2,9],[0,2,10], // 10
    [0,5,1],[0,5,2],[0,5,3],[0,5,4],[0,5,5],[0,5,6],[0,5,7],[0,5,8],[0,5,9],[0,5,10], // 10
    [0,1,2],[0,1,3],[0,1,4],[0,1,5],[0,1,6],[0,1,7],[0,1,8],[0,1,9], // 8
    [0,6,2],[0,6,3],[0,6,4],[0,6,5],[0,6,6],[0,6,7],[0,6,8],[0,6,9], // 8
    [0,0,3],[0,0,4],[0,0,5],[0,0,6],[0,0,7],[0,0,8], // 6
    [0,7,3],[0,7,4],[0,7,5],[0,7,6],[0,7,7],[0,7,8], // 6
    // Layer 1 - 8x6 = 48 -> –£–º–µ–Ω—å—à–∏–º –¥–æ 40
    [1,3,2],[1,3,3],[1,3,4],[1,3,5],[1,3,6],[1,3,7],[1,3,8],[1,3,9], // 8
    [1,4,2],[1,4,3],[1,4,4],[1,4,5],[1,4,6],[1,4,7],[1,4,8],[1,4,9], // 8
    [1,2,3],[1,2,4],[1,2,5],[1,2,6],[1,2,7],[1,2,8], // 6
    [1,5,3],[1,5,4],[1,5,5],[1,5,6],[1,5,7],[1,5,8], // 6
    // Layer 2 - 4x4 = 16 -> –£–º–µ–Ω—å—à–∏–º –¥–æ 12
    [2,3,4],[2,3,5],[2,3,6],[2,3,7], // 4
    [2,4,4],[2,4,5],[2,4,6],[2,4,7], // 4
    // Layer 3 (Top) - 2
    [3,3.5,5.5], // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ—Å—Ç—å

    [0,3.5,-1], [0,3.5,12] // –ë–æ–∫–æ–≤—ã–µ –∫–æ—Å—Ç–∏ (—É–±—Ä–∞–ª 3, –æ—Å—Ç–∞–≤–∏–ª 2)
];
// –ò—Ç–æ–≥–æ: 104 –∫–æ—Å—Ç–∏ (144 - (2*12 + 2*10 + 2*8 + 2*6) + 8 + 8 + 6 + 6 + 4 + 4 + 1 + 2)
// –ü—Ä–∏–≤–µ–¥—É –∫ 144 –∫–æ—Å—Ç—è–º:
const FINAL_LAYOUT = [
    // 0 (14x12) - 104 –∫–æ—Å—Ç–∏
    [0,3,1],[0,3,2],[0,3,3],[0,3,4],[0,3,5],[0,3,6],[0,3,7],[0,3,8],[0,3,9],[0,3,10],[0,3,11],[0,3,12],[0,3,13],[0,3,14], // 14
    [0,4,1],[0,4,2],[0,4,3],[0,4,4],[0,4,5],[0,4,6],[0,4,7],[0,4,8],[0,4,9],[0,4,10],[0,4,11],[0,4,12],[0,4,13],[0,4,14], // 14
    [0,2,2],[0,2,3],[0,2,4],[0,2,5],[0,2,6],[0,2,7],[0,2,8],[0,2,9],[0,2,10],[0,2,11],[0,2,12],[0,2,13], // 12
    [0,5,2],[0,5,3],[0,5,4],[0,5,5],[0,5,6],[0,5,7],[0,5,8],[0,5,9],[0,5,10],[0,5,11],[0,5,12],[0,5,13], // 12
    [0,1,3],[0,1,4],[0,1,5],[0,1,6],[0,1,7],[0,1,8],[0,1,9],[0,1,10],[0,1,11],[0,1,12], // 10
    [0,6,3],[0,6,4],[0,6,5],[0,6,6],[0,6,7],[0,6,8],[0,6,9],[0,6,10],[0,6,11],[0,6,12], // 10
    [0,0,4],[0,0,5],[0,0,6],[0,0,7],[0,0,8],[0,0,9],[0,0,10],[0,0,11], // 8
    [0,7,4],[0,7,5],[0,7,6],[0,7,7],[0,7,8],[0,7,9],[0,7,10],[0,7,11], // 8
    [0,3.5,0], [0,3.5,15], // 2 –ë–æ–∫–æ–≤—ã–µ
    
    // 1 (8x6) - 32 –∫–æ—Å—Ç–∏
    [1,3,4],[1,3,5],[1,3,6],[1,3,7],[1,3,8],[1,3,9],[1,3,10],[1,3,11], // 8
    [1,4,4],[1,4,5],[1,4,6],[1,4,7],[1,4,8],[1,4,9],[1,4,10],[1,4,11], // 8
    [1,2,5],[1,2,6],[1,2,7],[1,2,8],[1,2,9],[1,2,10], // 6
    [1,5,5],[1,5,6],[1,5,7],[1,5,8],[1,5,9],[1,5,10], // 6
    [1,3.5,2], [1,3.5,13], // 2 –ë–æ–∫–æ–≤—ã–µ
    
    // 2 (4x4) - 8 –∫–æ—Å—Ç–µ–π
    [2,3,6],[2,3,7],[2,3,8],[2,3,9], // 4
    [2,4,6],[2,4,7],[2,4,8],[2,4,9], // 4
    
    // 3 (Top) - 2 –∫–æ—Å—Ç–∏ (–±—ã–ª–∞ 1, —Å–¥–µ–ª–∞–µ–º 2 –¥–ª—è —Å–∏–º–º–µ—Ç—Ä–∏–∏)
    [3,3.5,7.5], [3,3.5,8.5]
]; // 8+8+6+6+4+4+1+2 = 39. –ù–µ 144.
// –í–æ–∑—å–º–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π LAYOUT (144 –∫–æ—Å—Ç–∏), –Ω–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã TILE_WIDTH_GRID/TILE_HEIGHT_GRID –≤ renderBoard
// —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω—É–∂–Ω—ã–π –º–∞—Å—à—Ç–∞–± –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.

const LAYOUT_ORIGINAL = [
    [0,3,0],[0,3,1],[0,3,2],[0,3,3],[0,3,4],[0,3,5],[0,3,6],[0,3,7],[0,3,8],[0,3,9],[0,3,10],[0,3,11],
    [0,4,0],[0,4,1],[0,4,2],[0,4,3],[0,4,4],[0,4,5],[0,4,6],[0,4,7],[0,4,8],[0,4,9],[0,4,10],[0,4,11],
    [0,2,1],[0,2,2],[0,2,3],[0,2,4],[0,2,5],[0,2,6],[0,2,7],[0,2,8],[0,2,9],[0,2,10],
    [0,5,1],[0,5,2],[0,5,3],[0,5,4],[0,5,5],[0,5,6],[0,5,7],[0,5,8],[0,5,9],[0,5,10],
    [0,1,2],[0,1,3],[0,1,4],[0,1,5],[0,1,6],[0,1,7],[0,1,8],[0,1,9],
    [0,6,2],[0,6,3],[0,6,4],[0,6,5],[0,6,6],[0,6,7],[0,6,8],[0,6,9],
    [0,0,3],[0,0,4],[0,0,5],[0,0,6],[0,0,7],[0,0,8],
    [0,7,3],[0,7,4],[0,7,5],[0,7,6],[0,7,7],[0,7,8],
    [1,3,2],[1,3,3],[1,3,4],[1,3,5],[1,3,6],[1,3,7],[1,3,8],[1,3,9],
    [1,4,2],[1,4,3],[1,4,4],[1,4,5],[1,4,6],[1,4,7],[1,4,8],[1,4,9],
    [1,2,3],[1,2,4],[1,2,5],[1,2,6],[1,2,7],[1,2,8],
    [1,5,3],[1,5,4],[1,5,5],[1,5,6],[1,5,7],[1,5,8],
    [2,3,4],[2,3,5],[2,3,6],[2,3,7],
    [2,4,4],[2,4,5],[2,4,6],[2,4,7],
    [3,3.5,5.5],
    [0,3.5,13],[0,3.5,14],[0,3.5,15]
]; // 144 –∫–æ—Å—Ç–∏

function hasAvailableMoves(currentBoard) {
    const selectableTiles = currentBoard.filter(t => !t.isRemoved && !isTileBlocked(t, currentBoard));
    const counts = {};
    selectableTiles.forEach(tile => {
        const key = tile.group || tile.symbol;
        counts[key] = (counts[key] || 0) + 1;
    });
    return Object.values(counts).some(count => count >= 2);
}

function startGame() {
    let deck;
    let attempts = 0;

    do {
        deck = [];
        for (let i = 0; i < TILE_SYMBOLS.length; i++) {
            for (let j = 0; j < 4; j++) {
                deck.push({ symbol: TILE_SYMBOLS[i], id: `${TILE_SYMBOLS[i]}_${j}` });
            }
        }
        // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–∏–º ID –∫ —Å–µ–∑–æ–Ω–Ω—ã–º/—Ü–≤–µ—Ç–æ—á–Ω—ã–º –∫–æ—Å—Ç—è–º
        ['üå∏','üåº','üçÇ','‚ùÑÔ∏è'].forEach((s, i) => deck.push({ symbol: s, id: `${s}_${i}`, group: 'season' }));
        ['üå∫','üåª','üçÅ','üçÉ'].forEach((f, i) => deck.push({ symbol: f, id: `${f}_${i}`, group: 'flower' }));

        for (let i = deck.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [deck[i], deck[j]] = [deck[j], deck[i]];
        }
        
        board = [];
        // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º LAYOUT_ORIGINAL
        LAYOUT_ORIGINAL.forEach((pos, index) => {
            const cardData = deck[index];
            board.push({ ...cardData, z: pos[0], y: pos[1], x: pos[2], isRemoved: false });
        });

        attempts++;
        if (attempts > 100) {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ö–æ–¥–∞–º–∏.");
            break;
        }

    } while (!hasAvailableMoves(board));

    selectedTile = null;
    document.getElementById('mahjong-overlay').style.display = 'none';
    tilesLeft = board.length;
    renderBoard();
}


function renderBoard() {
    const boardEl = document.getElementById('mahjong-board');
    const tilesLeftEl = document.getElementById('mahjong-tiles-left');
    boardEl.innerHTML = '';
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ Z, –∑–∞—Ç–µ–º –ø–æ Y, –∑–∞—Ç–µ–º –ø–æ X –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–ª–æ–∂–µ–Ω–∏—è
    const sortedBoard = [...board].sort((a,b) => a.z - b.z || a.y - b.y || a.x - b.x);

    sortedBoard.forEach(tile => {
        if (tile.isRemoved) return;
        
        const tileEl = document.createElement('div');
        tileEl.className = 'mahjong-tile';
        tileEl.textContent = tile.symbol;
        tileEl.dataset.id = tile.id;
        
        // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤—ã–π 3D-—Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ ---
        // –ë–∞–∑–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (—Ü–µ–Ω—Ç—Ä–æ–≤–∫–∞)
        const left = tile.x * TILE_X_UNIT;
        const top = tile.y * TILE_Y_UNIT;

        tileEl.style.left = `${left}%`;
        tileEl.style.top = `${top}%`;
        
        // –°–º–µ—â–µ–Ω–∏–µ –ø–æ Z (–≥–ª—É–±–∏–Ω–µ)
        const shiftX = tile.z * TILE_SHIFT_Z;
        const shiftY = tile.z * TILE_SHIFT_Z;
        const shiftZ = tile.z * TILE_SHIFT_Z;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º transform: translate3d –¥–ª—è –ª—É—á—à–µ–≥–æ 3D-—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è
        tileEl.style.transform = `translate3d(${shiftX}px, ${shiftY}px, ${shiftZ}px)`;

        // Z-Index –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è (–ø–æ z, –∑–∞—Ç–µ–º –ø–æ y)
        tileEl.style.zIndex = tile.z * 100 + tile.y; 

        boardEl.appendChild(tileEl);
        tile.element = tileEl;
    });
    
    tilesLeftEl.textContent = tilesLeft;
    updateSelectableTiles();
}

// ... –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π ...

function isTileBlocked(tile, currentBoard = board) {
    const isCovered = currentBoard.some(other => 
        !other.isRemoved && 
        other.z > tile.z && 
        // 1.5 - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Å—Ç–∏ "–≤–ø—Ä–∏—Ç—ã–∫"
        Math.abs(other.x - tile.x) < 1.5 && 
        Math.abs(other.y - tile.y) < 1.5
    );
    if (isCovered) return true;

    const isBlockedOnLeft = currentBoard.some(other =>
        !other.isRemoved &&
        other.z === tile.z &&
        other.x === tile.x - 2 &&
        Math.abs(other.y - tile.y) < 1.5
    );
    const isBlockedOnRight = currentBoard.some(other =>
        !other.isRemoved &&
        other.z === tile.z &&
        other.x === tile.x + 2 &&
        Math.abs(other.y - tile.y) < 1.5
    );

    return isBlockedOnLeft && isBlockedOnRight;
}

function updateSelectableTiles() {
    let selectableCount = 0;
    board.forEach(tile => {
        if (tile.isRemoved) return;
        if (!isTileBlocked(tile)) {
            tile.element.classList.add('selectable');
            selectableCount++;
        } else {
            tile.element.classList.remove('selectable');
        }
    });
    
    setTimeout(checkForAvailableMoves, 10);
}

function checkForAvailableMoves() {
    const shuffleBtn = document.getElementById('mahjong-shuffle-btn');
    // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–∫–ª—é—á–∞—é –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–º–µ—à–∞—Ç—å" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ö–æ–¥–æ–≤, –∞ –∫–æ—Å—Ç–∏ –æ—Å—Ç–∞–ª–∏—Å—å.
    if (!hasAvailableMoves(board) && tilesLeft > 0) {
        shuffleBtn.disabled = false;
        showOverlay("–ù–µ—Ç —Ö–æ–¥–æ–≤!", "–ù–∞–∂–º–∏—Ç–µ '–ü–µ—Ä–µ–º–µ—à–∞—Ç—å' –∏–ª–∏ '–ù–æ–≤–∞—è –∏–≥—Ä–∞'.");
    } else {
        shuffleBtn.disabled = true;
    }
    document.getElementById('mahjong-hint-btn').disabled = !hasAvailableMoves(board);
}

function handleTileClick(tileEl) {
    if (!tileEl.classList.contains('selectable')) return;
    
    const clickedTileData = board.find(t => t.id === tileEl.dataset.id);

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π
    if (selectedTile && selectedTile.id !== clickedTileData.id) {
        selectedTile.element.classList.remove('selected');
    }

    if (selectedTile) {
        if (selectedTile.id === clickedTileData.id) {
            // –°–Ω—è—Ç–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            selectedTile.element.classList.remove('selected');
            selectedTile = null;
            return;
        }

        const isMatch = (selectedTile.symbol === clickedTileData.symbol) || 
                        (selectedTile.group && selectedTile.group === clickedTileData.group);

        if (isMatch) {
            selectedTile.isRemoved = true;
            clickedTileData.isRemoved = true;
            
            // –ü–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
            selectedTile.element.style.opacity = '0';
            clickedTileData.element.style.opacity = '0';
            
            setTimeout(() => {
                selectedTile.element.remove();
                clickedTileData.element.remove();
                tilesLeft -= 2;

                selectedTile = null;
                renderBoard(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ—Å—Ç–µ–π
                
                if (tilesLeft === 0) {
                    showOverlay("–ü–æ–±–µ–¥–∞!", "–í—ã –æ—á–∏—Å—Ç–∏–ª–∏ –≤—Å—ë –ø–æ–ª–µ!");
                }
            }, 200); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
            
        } else {
            // –ù–µ —Å–æ–≤–ø–∞–ª–∏, –Ω–æ –æ–±–µ –≤—ã–±—Ä–∞–Ω—ã. –¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–æ–≤–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π.
            selectedTile = clickedTileData;
            selectedTile.element.classList.add('selected');
        }

    } else {
        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ—Å—Ç—å
        selectedTile = clickedTileData;
        selectedTile.element.classList.add('selected');
    }
}

function showOverlay(title, text) {
    document.getElementById('mahjong-overlay-title').textContent = title;
    document.getElementById('mahjong-overlay-text').textContent = text;
    document.getElementById('mahjong-overlay').style.display = 'flex';
}

function findHint() {
    clearTimeout(hintTimeout);
    document.querySelectorAll('.hint').forEach(el => el.classList.remove('hint'));

    const selectableTiles = board.filter(t => !t.isRemoved && t.element.classList.contains('selectable'));
    const groups = {};
    for (const tile of selectableTiles) {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏, –Ω–æ —Å–∏–º–≤–æ–ª—ã/–≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        const key = tile.group || tile.symbol; 
        if (!groups[key]) groups[key] = [];
        groups[key].push(tile);
    }
    
    for (const key in groups) {
        if (groups[key].length >= 2) {
            const tile1 = groups[key][0];
            const tile2 = groups[key][1];
            
            // –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –æ–¥–Ω–∞ –∫–æ—Å—Ç—å, –æ—Ç–º–µ–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä–µ–¥ –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
            if (selectedTile) {
                selectedTile.element.classList.remove('selected');
                selectedTile = null;
            }
            
            tile1.element.classList.add('hint');
            tile2.element.classList.add('hint');
            
            hintTimeout = setTimeout(() => {
                tile1.element.classList.remove('hint');
                tile2.element.classList.remove('hint');
            }, 2000);
            return;
        }
    }
}

function shuffleBoard() {
    const remainingTiles = board.filter(t => !t.isRemoved);
    // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ symbol/id/group, –Ω–æ –∏ —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    const tilePositions = remainingTiles.map(t => ({ x: t.x, y: t.y, z: t.z }));

    const tilesToShuffle = remainingTiles.map(t => ({ symbol: t.symbol, id: t.id, group: t.group }));

    for (let i = tilesToShuffle.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [tilesToShuffle[i], tilesToShuffle[j]] = [tilesToShuffle[j], tilesToShuffle[i]];
    }
    
    // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã
    let attempts = 0;
    let newBoard;
    do {
        newBoard = remainingTiles.map((tile, index) => {
            const newTileData = tilesToShuffle[index];
            const pos = tilePositions[index];
            return { ...newTileData, x: pos.x, y: pos.y, z: pos.z, isRemoved: false, element: null };
        });

        // –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç —Ö–æ–¥–æ–≤
        if (!hasAvailableMoves(newBoard)) {
            for (let i = tilesToShuffle.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [tilesToShuffle[i], tilesToShuffle[j]] = [tilesToShuffle[j], tilesToShuffle[i]];
            }
        }
        attempts++;
    } while (!hasAvailableMoves(newBoard) && attempts < 50);

    if (attempts >= 50) {
        showOverlay("–û—à–∏–±–∫–∞!", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ö–æ–¥–∞–º–∏.");
        return;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫ —Å—Ç–∞—Ä–æ–º—É –º–∞—Å—Å–∏–≤—É (—á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Å—Å—ã–ª–∫–∏)
    remainingTiles.forEach((tile, index) => {
        const newTileData = tilesToShuffle[index];
        tile.symbol = newTileData.symbol;
        tile.id = newTileData.id;
        tile.group = newTileData.group;
    });
    
    document.getElementById('mahjong-overlay').style.display = 'none';
    selectedTile = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ—Å—Ç—å
    renderBoard();
}

export function init() {
    const boardEl = document.getElementById('mahjong-board');
    const newGameBtn = document.getElementById('mahjong-new-game-btn');
    const hintBtn = document.getElementById('mahjong-hint-btn');
    const shuffleBtn = document.getElementById('mahjong-shuffle-btn');

    boardEl.addEventListener('click', (e) => {
        const tileEl = e.target.closest('.mahjong-tile');
        if (tileEl) handleTileClick(tileEl);
    });

    newGameBtn.addEventListener('click', startGame);
    hintBtn.addEventListener('click', findHint);
    shuffleBtn.addEventListener('click', shuffleBoard);
    
    startGame();
}

export function cleanup() {
    clearTimeout(hintTimeout);
    board = [];
    selectedTile = null;
}
