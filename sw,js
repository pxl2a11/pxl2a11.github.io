// sw.js

const CACHE_NAME = 'mini-apps-cache-v3'; // ВЕРСИЯ КЭША ОБНОВЛЕНА!

// Список всех модулей приложений для кэширования
const appModules = [
    'speedTest', 'radio', 'notesAndTasks', 'soundAndMicTest', 'audioCompressor', 
    'myIp', 'passwordGenerator', 'percentageCalculator', 'timer', 'fortuneWheel', 
    'magicBall', 'ticTacToe', 'minesweeper', 'stopwatch', 'randomColor', 
    'numberGenerator', 'qrCodeGenerator', 'emojiAndSymbols', 'unitConverter', 
    'dateCalculator', 'bmiCalculator', 'wordCounter', 'qrScanner', 'piano', 
    'changelogPage', 'caseConverter', 'imageConverter', 'colorConverter', 
    'memoryGame', 'textTranslit', 'imageResizer', 'currencyCalculator', 
    'snakeGame', 'timezoneConverter', 'textToSpeech', 'rockPaperScissors', 
    'sudoku', 'zipArchiver', 'game2048', 'barcodeGenerator', 'voiceRecorder'
];

// Генерируем пути к JS файлам и SVG иконкам приложений
const appJsFiles = appModules.map(module => `/js/apps/${module}.js`);
const appSvgIcons = appModules.map(module => `/img/${module}.svg`);


// Список файлов для кэширования (App Shell)
const urlsToCache = [
  '/',
  '/index.html',
  '/manifest.json',
  '/css/style.css',
  '/css/leaflet.css',
  '/js/main.js',
  '/js/lame.min.js',
  '/js/jsQR.min.js',
  '/js/leaflet.js',
  '/js/qrcode.min.js',
  '/js/jszip.min.js',
  '/js/JsBarcode.all.min.js',
  '/js/tailwind.js',
  '/js/Sortable.min.js',
  
  // Основной логотип и иконки PWA
  '/img/logo.svg',
  '/img/icons/icon-192x192.png',
  '/img/icons/icon-512x512.png',

  // Вспомогательные изображения
  '/img/plusapps.svg',
  '/img/minusapps.svg',

  // Добавляем все JS файлы и иконки приложений
  ...appJsFiles,
  ...appSvgIcons
];

// Установка Service Worker
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('Кэш открыт');
        return cache.addAll(urlsToCache).catch(error => {
            console.error('Не удалось кэшировать файлы при установке:', error);
        });
      })
  );
});

// Активация Service Worker и очистка старых кэшей
self.addEventListener('activate', event => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            console.log('Удаление старого кэша:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});

// Перехват сетевых запросов
self.addEventListener('fetch', event => {
  // Игнорируем запросы к Firebase и Google API
  if (event.request.url.includes('firebase') || event.request.url.includes('google.com') || event.request.url.includes('googleapis.com')) {
    return;
  }
    
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        // Если ресурс найден в кэше, возвращаем его
        if (response) {
          return response;
        }

        return fetch(event.request).then(
          response => {
            // Кэшируем только корректные GET-запросы
            if (!response || response.status !== 200 || response.type !== 'basic' || event.request.method !== 'GET') {
              return response;
            }
            
            const responseToCache = response.clone();

            caches.open(CACHE_NAME)
              .then(cache => {
                cache.put(event.request, responseToCache);
              });

            return response;
          }
        );
